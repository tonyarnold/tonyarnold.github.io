<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>The blog of Tony Arnold</title>
 <link href="https://tonyarnold.com/atom.xml" rel="self"/>
 <link href="https://tonyarnold.com"/>
 <updated>2023-07-27T16:05:11+10:00</updated>
 <id>https://tonyarnold.com</id>
 <author>
   <name>Tony Arnold</name>
   <email>tony@tonyarnold.com</email>
 </author>

 
 <entry>
   <title>Integrating GYB with Xcode</title>
   <link href="https://tonyarnold.com/2018/07/11/gyb-xcode-integration.html"/>
   <updated>2018-07-11T22:30:00+10:00</updated>
   <id>https://tonyarnold.com/2018/07/11/gyb-xcode-integration</id>
   <content type="html">&lt;p&gt;NSHipster posted a great article on &lt;a href=&quot;https://nshipster.com/swift-gyb/&quot;&gt;using GYB to reduce boilerplate in your Swift projects&lt;/a&gt;, but I found the suggestion of how to integrate with Xcode via a Build Phase a bit loose and messy (at least in terms of littering your project directory with generated files).&lt;/p&gt;

&lt;p&gt;I’d suggest you have a look at creating a custom Build Rule instead - this will have the advantage of outputting the generated Swift files to a directory outside of your project (therefore leaving your Git status clean during CI and other automated processes).&lt;/p&gt;

&lt;p&gt;Here’s what you need to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do exactly as &lt;a href=&quot;https://nshipster.com/swift-gyb/#using-gyb-in-xcode&quot;&gt;Mattt suggests in his article&lt;/a&gt; and download the GYB scripts into your project directory:&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;Scripts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Scripts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/apple/swift/raw/master/utils/gyb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://github.com/apple/swift/raw/master/utils/gyb.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x gyb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;In Xcode, select your project, then the target you wish to use GYB files with, then select the &lt;em&gt;Build Rules&lt;/em&gt; tab.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the small &lt;em&gt;+&lt;/em&gt; button to add a new Build Rule, then configure it as follows:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Process &lt;strong&gt;Source files with names matching:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.gyb&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Using &lt;strong&gt;Custom script:&lt;/strong&gt;, using the following script:&lt;/p&gt;

        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Scripts/gyb&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--line-directive&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DERIVED_FILE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUT_FILE_BASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INPUT_FILE_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Add one entry to &lt;strong&gt;Output Files&lt;/strong&gt;:&lt;/p&gt;

        &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;DERIVED_FILE_DIR&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;INPUT_FILE_BASE&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a new GYB file in your project - remember that it &lt;strong&gt;must&lt;/strong&gt; have a file extension of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.swift.gyb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add the new GYB file to your target’s &lt;em&gt;Compile Sources&lt;/em&gt; phase.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scripts/gyb.pyc&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build your project. You can check that the output of your GYB is as you expect by navigating to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DERIVED_FILE_DIR&lt;/code&gt; directory. This is usually some variation of the following:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Developer/Xcode/DerivedData/YOURPROJECT-ID/Build/Intermediates.noindex/YOURPROJECT.build/Debug/YOURTARGET.build/DerivedSources/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;That’s it! Commit your changes and get started replacing your boilerplate with automated GYB files.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt; You could consider integrating Krzysztof Zabłocki’s &lt;a href=&quot;https://github.com/krzysztofzablocki/Sourcery&quot;&gt;Sourcery&lt;/a&gt; instead of GYB - it provides much the same result in a similar template format, but has a bunch of well documented examples and tutorials available.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>How to show the duration of builds in Xcode</title>
   <link href="https://tonyarnold.com/2016/04/20/xcode-build-duration.html"/>
   <updated>2016-04-20T09:15:00+10:00</updated>
   <id>https://tonyarnold.com/2016/04/20/xcode-build-duration</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-build-duration.png&quot; alt=&quot;Xcode Toolbar showing build duration&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ever wondered how long your builds in Xcode are taking? Here’s a quick way to show the build duration in seconds inside Xcode after each build:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In your terminal, type:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Relaunch Xcode.&lt;/li&gt;
  &lt;li&gt;Build your project to see the duration of each build!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re looking for something with a bit more control over how the duration is displayed, you should check out Craig Edwards’ &lt;a href=&quot;https://github.com/edwardaux/BuildMeUp&quot;&gt;BuildMeUp Xcode Plugin&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reveal 1.5</title>
   <link href="https://tonyarnold.com/2015/02/04/revealution.html"/>
   <updated>2015-02-04T09:46:00+11:00</updated>
   <id>https://tonyarnold.com/2015/02/04/revealution</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://revealapp.com/&quot;&gt;&lt;img src=&quot;http://static.tonyarnold.com/reveal_icon@2x.png&quot; alt=&quot;Reveal Application Icon&quot; class=&quot;center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;/about/&quot;&gt;you may have noticed&lt;/a&gt;, I joined the team at Itty Bitty Apps midway through last year. I’ve spent the last 8 months working with my super-talented colleagues on a &lt;a href=&quot;http://revealapp.com/&quot;&gt;major update to Reveal — version 1.5&lt;/a&gt;. It’s out today, and a huge amount of love and work has gone into making a tool that I think is better than it’s competitors in almost every way. And the best bit? It’s a free update for existing Reveal customers!&lt;/p&gt;

&lt;p&gt;Bringing Auto Layout constraint inspection, a redesigned and rethought user interface as well as innumerable bug fixes and improvements it’s a huge update.&lt;/p&gt;

&lt;p&gt;If you’re an iOS developer who isn’t using Reveal: &lt;strong&gt;you should be&lt;/strong&gt;. If you are: update now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift: Death to Telescoping Constructors</title>
   <link href="https://tonyarnold.com/2014/12/13/death-to-telescoping-constructors.html"/>
   <updated>2014-12-13T15:00:00+11:00</updated>
   <id>https://tonyarnold.com/2014/12/13/death-to-telescoping-constructors</id>
   <content type="html">&lt;p&gt;One of the many things about Swift that has made me happy is the introduction of default parameter values in methods. In Objective-C, it’s pretty common to see APIs that look a lot like the following code (taken from MagicalRecord):&lt;/p&gt;

&lt;div class=&quot;language-obj-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// NSManagedObjectContext+MagicalFinders.h&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstInContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;searchTerm&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;searchterm&lt;/span&gt;
                              &lt;span class=&quot;nf&quot;&gt;sortedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;property&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ascending&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// NSManagedObjectContext+MagicalFinders.m&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstInContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
                             &lt;span class=&quot;nl&quot;&gt;sortedBy:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
                            &lt;span class=&quot;nl&quot;&gt;inContext:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;searchTerm&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchTerm&lt;/span&gt;
                             &lt;span class=&quot;nl&quot;&gt;sortedBy:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
                            &lt;span class=&quot;nl&quot;&gt;ascending:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;
                            &lt;span class=&quot;nl&quot;&gt;inContext:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSPredicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;searchterm&lt;/span&gt;
                              &lt;span class=&quot;nf&quot;&gt;sortedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sortedBy&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ascending&lt;/span&gt;
                             &lt;span class=&quot;nf&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Actual implementation of method&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This pattern is often referred to as the “telescopic pattern”, or “telescoping methods”. Basically, you implement a number of methods that each call the next, more specific method in the chain, providing default values at each stage as they become necessary. Users of the API can choose to use any of the methods, allowing for more succinct code, but only requiring a single “real” method implementation.&lt;/p&gt;

&lt;p&gt;In Swift, this functionality is built into the language (hooray!). As an example, given the following method in Swift:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;sortedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;inContext&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Actual implementation of method&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Users of this Swift API can choose &lt;em&gt;not to include any parameters that have default values&lt;/em&gt;, ie:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// OR&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;otherResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sortedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;someProperty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                          &lt;span class=&quot;nv&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// OR&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moreResults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findFirstWithPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sortedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;someProperty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;nv&quot;&gt;ascending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;nv&quot;&gt;inContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// You get the gist of it!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows for more succinct methods calls, without the mountain of boilerplate we would have had to write in Objective-C!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Working with NSNotFound in Swift</title>
   <link href="https://tonyarnold.com/2014/07/21/nsnotfound-in-swift.html"/>
   <updated>2014-07-21T11:43:00+10:00</updated>
   <id>https://tonyarnold.com/2014/07/21/nsnotfound-in-swift</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Disclaimer: This information is current as of Xcode 6.0b3, and is subject to change in future seeds. Also, I — like everyone outside Apple — am still learning Swift. Please, &lt;a href=&quot;https://twitter.com/tonyarnold/&quot;&gt;let me know if I’ve missed something&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; About 35 seconds after I posted this, @mattyohe &lt;a href=&quot;https://twitter.com/mattyohe/status/491054206795923456&quot;&gt;pointed out that this is exactly what Swift’s optionals are for&lt;/a&gt;. I expect that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSNotFound&lt;/code&gt; will disappear at some point in the next few years.&lt;/p&gt;

&lt;p&gt;The class ended up looking like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImagePageViewModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;atIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSNotFound&lt;/code&gt; is currently a common way for Cocoa frameworks to indicate that a result couldn’t be found when searching through indices and other serial data. I wanted to create a simple Swift class to represent the data behind a cell that displays an image, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImagePageViewModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, I ran into a few errors that didn’t have  obvious solutions (at least to me!) from the outset.&lt;/p&gt;

&lt;p&gt;Straight up, if you’ve tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSNotFound&lt;/code&gt; in Swift you’ve probably hit a few stumbling blocks. If you create the class above in your project, you’ll see an error — &lt;strong&gt;Ambiguous use of ‘NSNotFound’&lt;/strong&gt;. To fix this, you’ll need to be more explicit about where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSNotFound&lt;/code&gt; is coming from — easy enough, &lt;a href=&quot;http://ericasadun.com/2014/06/13/swift-fixing-ambiguous-use-of-nsnotfound/&quot;&gt;as described by Erica Sadun&lt;/a&gt; just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation.NSNotFound&lt;/code&gt; instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, you’ll see Swift get a little tripped up trying to convert from an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSInteger&lt;/code&gt; to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSNumber&lt;/code&gt; and then back to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; again — the error this time is &lt;strong&gt;‘NSNumber’ is not a subtype of ‘Int’&lt;/strong&gt;. In this class, I wanted to use pure Swift types as much as possible while maintaining Cocoa-isms like NSNotFound, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; parameter is defined as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m sure there’s a pragmatic argument to be made for just defining this parameter as an NSNumber and wiping your hands of the problem, but I’m being idealistic in my adoption and learning of Swift so assume that I really want this parameter to be an Int.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s pretty easy to give Swift hints about the types you’d like things to resolve to, and you’ll probably need to do this a bit with numbers. In this instance, we’ll explicity force this number to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atIndex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This compiles and works as you’d expect. I can now call either:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImagePageViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImagePageViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I don’t have enough experience with Swift yet to know if the conversion of an enumerable type in Objective-C to C should require wrapping in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int()&lt;/code&gt; so I’ve not filed this as a radar.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>#663399Becca</title>
   <link href="https://tonyarnold.com/2014/06/12/663399.html"/>
   <updated>2014-06-12T23:19:00+10:00</updated>
   <id>https://tonyarnold.com/2014/06/12/663399</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;It will not be enough. Nothing will ever be enough. But it will be something.&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Jeffrey Zeldman from “&lt;a href=&quot;http://www.zeldman.com/2014/06/10/the-color-purple/&quot;&gt;The Color Purple&lt;/a&gt;”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve been following Eric’s posts throughout Rebecca’s illness, and they have been the most heartbreaking words I’ve ever read:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All the light bulbs of discovery that will never switch on, all the radiant smiles of pride that will never burst forth, all the moments of insight that will never unfold, all the experiences she’ll never enjoy.  I feel the weight of all the years she will never have, and they may yet crush me.&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Eric Meyer from “&lt;a href=&quot;http://meyerweb.com/eric/thoughts/2014/06/10/so-many-nevers/&quot;&gt;So Many Nevers&lt;/a&gt;”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;They’ve also been some of the most beautiful&lt;/strong&gt;. The love that his little girl had in her time here is amazing, and Eric’s words left me in tears more than once.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Automatically Formatting Your Objective-C</title>
   <link href="https://tonyarnold.com/2014/05/31/autoformatting-your-code.html"/>
   <updated>2014-05-31T13:22:00+10:00</updated>
   <id>https://tonyarnold.com/2014/05/31/autoformatting-your-code</id>
   <content type="html">&lt;p&gt;One of the tenets of writing good code is keeping your code readable. This is a conversation that includes more than just the visual aesthetic of how you lay out your classes, but today I’d like to focus on that because it’s something we can automate (whereas good class design is what keeps us all employed, and presently &lt;em&gt;can’t&lt;/em&gt; be automated).&lt;/p&gt;

&lt;p&gt;Using consistent numbers of lines between common structures allows your brain to more easily pick up patterns in your code, which helps you scan the structure of your classes faster. It’s also hugely beneficial when introducing a new developer to your existing code — the patterns make reading and learning your classes a much nicer experience.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“But”&lt;/em&gt;, I hear you say, &lt;em&gt;“it takes too long to worry about formatting and laying out my code! What’s a few misplaced brackets going to cost me in the long run?”&lt;/em&gt; and away you go, committing inconsistently formatted code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/picard-facepalm.jpeg&quot; alt=&quot;Jean-Luc Picard facepalming&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What if you didn’t have to do anything extra while you’re actually writing your code? (sans a little initial setup)&lt;/p&gt;

&lt;p&gt;The great news is that there are multiple tools available to help format Objective-C, but the one to watch seems to be &lt;a href=&quot;http://clang.llvm.org/docs/ClangFormat.html&quot;&gt;Clang Format&lt;/a&gt;. Given that it is integrated into the Clang toolset, there’s a good chance that Apple may include it in a future release of Xcode.&lt;/p&gt;

&lt;p&gt;Out of the box, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-format&lt;/code&gt; is a command-line tool that you can run directly on your source files. It doesn’t add/remove code from your source, instead focusing on adjusting the whitespace characters within your source to make code more consistent.&lt;/p&gt;

&lt;p&gt;With a little bit of extra effort, you can make Clang Format available from within Xcode.&lt;/p&gt;

&lt;h2 id=&quot;install-clangformat-xcode&quot;&gt;Install ClangFormat-Xcode&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/travisjeffery/ClangFormat-Xcode/&quot;&gt;ClangFormat-Xcode&lt;/a&gt; is an Xcode plugin developed by &lt;a href=&quot;https://github.com/travisjeffery&quot;&gt;Travis Jeffery&lt;/a&gt; that makes Clang’s format tools available within Xcode.&lt;/p&gt;

&lt;p&gt;Travis has made the plugin available via &lt;a href=&quot;http://alcatraz.io/&quot;&gt;Alcatraz&lt;/a&gt;. Alternately if you wish to install the plugin manually:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checkout the &lt;a href=&quot;https://github.com/travisjeffery/ClangFormat-Xcode/&quot;&gt;git repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Build and run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClangFormat-Xcode.xcodeproj&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Restart Xcode&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There will be a new menu item under &lt;em&gt;Edit → Clang Format&lt;/em&gt; where you can configure and trigger automatic formatting of code in your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/clang-format-menu.png&quot; alt=&quot;Xcode Edit menu showing the Clang Format menu expanded&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can format the current file, selected text within the current file or more than one file selected in the Xcode project navigator. I’ve assigned keystrokes to these using &lt;em&gt;System Preferences → Keyboard → Shortcuts → App Shortcuts&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I find that I often leave &lt;em&gt;Enable Format On Save&lt;/em&gt; enabled once I have everything configured the way I like it. This means that every time I save, my files are automatically re-formatted to my liking and I don’t have to think about it — nice, right?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve had a few people let me know that the current build of ClangFormat-Xcode has issues formatting dictionary literals. This bug was fixed in Clang a week or two ago, and you can &lt;a href=&quot;http://static.tonyarnold.com/clang-format-20140601.zip&quot;&gt;download an updated build&lt;/a&gt; that I compiled today. Just place this new copy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-format&lt;/code&gt; in your PATH (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/clang-format&lt;/code&gt; is a good spot) and then select &lt;em&gt;Edit → Clang Format → Use System ClangFormat&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;configure-clang-format&quot;&gt;Configure Clang Format&lt;/h2&gt;

&lt;p&gt;Clang Format has a number of styles packaged with it, including the code formatting styles used by the LLVM project, Google, Chromium, Mozilla and WebKit. All of these projects make fairly heavy use of C++, so the way they format Objective-C can be less than ideal. Thankfully, Clang Format can be configured using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; file containing a series of configuration options.&lt;/p&gt;

&lt;p&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BasedOnStyle: Chromium
AlignTrailingComments: true
BreakBeforeBraces: Allman
ColumnLimit: 0
IndentWidth: 4
KeepEmptyLinesAtTheStartOfBlocks: false
ObjCSpaceAfterProperty: true
ObjCSpaceBeforeProtocolList: true
PointerBindsToType: false
SpacesBeforeTrailingComments: 1
TabWidth: 8
UseTab: Never
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-globally&quot;&gt;Configure Globally&lt;/h3&gt;

&lt;p&gt;It’s a good idea to have a global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; configuration file — you place this in your home directory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.clang-format&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;configuration-per-project&quot;&gt;Configuration Per Project&lt;/h3&gt;

&lt;p&gt;Each project can (and should) have its own configuration — just place a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; file in the root of your project.&lt;/p&gt;

&lt;h3 id=&quot;configuration-per-folder&quot;&gt;Configuration Per Folder&lt;/h3&gt;

&lt;p&gt;It’s common to include third party code in your projects that you’d prefer not to re-format accidentally. Simply put a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; file in the directory of the files you’d prefer not to format and make it’s contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
BasedOnStyle: None
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;you-have-no-excuse-now&quot;&gt;You Have No Excuse Now&lt;/h2&gt;

&lt;p&gt;So there you have it. There’ll be times where Clang Format’s output doesn’t quite match what you’re expecting, but it’s more important to be consistent and readable than perfect. I’d love to see more projects include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.clang-format&lt;/code&gt; file so that contributors can automatically adopt the formatting style without thinking about it.&lt;/p&gt;

&lt;p&gt;Go forth, be formatted (and let’s all cross our fingers for this being included in Xcode.next!).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Fast NSString Comparisons</title>
   <link href="https://tonyarnold.com/2014/04/27/fast-nsstring-comparison.html"/>
   <updated>2014-04-27T21:51:00+10:00</updated>
   <id>https://tonyarnold.com/2014/04/27/fast-nsstring-comparison</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;About 35 seconds after I posted this article, &lt;a href=&quot;https://twitter.com/insertjokehere/status/460387480211300352&quot;&gt;Lawrence Lomax pointed out&lt;/a&gt; that Mark Dalrymple had &lt;a href=&quot;http://blog.bignerdranch.com/334-isequal-vs-isequaltostring/&quot;&gt;already published exhaustive details about NSString comparisons on the Big Nerd Ranch blog&lt;/a&gt;. Go read that and stop wasting your time over here!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Earlier tonight, I came across a snippet of Objective-C code where the author had used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-compare:&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-isEqualToString:&lt;/code&gt; in every instance. My general rule is to always use the highest-level, most readable API unless there is a critical performance
issue when doing so, so I was intrigued (although I was pretty sure why this was being done):&lt;/p&gt;

&lt;p&gt;Here’s the simple test I ran:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;LANA!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;LAAANAA!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sameString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;LANA!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NSTimeInterval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSOrderedSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boopSame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sameString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bleepSame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sameString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSOrderedSame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeIntervalSinceReferenceDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Method&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Result&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Time Logged (seconds)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-isEqualToString:&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Strings did not match&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.000014&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-compare:&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Strings did not match&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.000007&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-isEqualToString:&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Strings matched&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.000001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-compare:&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Strings matched&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.000002&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Turns out that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-compare:&lt;/code&gt; is roughly twice as fast as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-isEqualToString:&lt;/code&gt; when the strings don’t match and the inverse is true when the strings match — although with the matching strings the difference is very nearly negligible.&lt;/p&gt;

&lt;p&gt;Personally, I’ll probably stick to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-isEqualToString:&lt;/code&gt; unless performance is absolutely critical — I find it much more readable, and that’s almost always more important than saving 0.000007 seconds.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clean up your projects with Xcode 5</title>
   <link href="https://tonyarnold.com/2014/04/10/clean-up-your-projects-with-xcode-5.html"/>
   <updated>2014-04-10T22:00:00+10:00</updated>
   <id>https://tonyarnold.com/2014/04/10/clean-up-your-projects-with-xcode-5</id>
   <content type="html">&lt;p&gt;Xcode 5 introduced a host of new features, fixes and performance enhancements but it also makes it possible to simplify your Xcode project and discard some maintenance tasks.&lt;/p&gt;

&lt;h2 id=&quot;link-frameworks-automatically&quot;&gt;Link Frameworks Automatically&lt;/h2&gt;

&lt;p&gt;Every Xcode project you’ve worked with is likely to have a &lt;em&gt;Frameworks&lt;/em&gt; group at the root of the project. If you’re on OS X it might contain things like &lt;em&gt;Cocoa.framework&lt;/em&gt;, &lt;em&gt;Foundation.framework&lt;/em&gt; and &lt;em&gt;CoreData.framework&lt;/em&gt;, on iOS it holds &lt;em&gt;UIKit.framework&lt;/em&gt; and friends. One of the improvements that came with Xcode 5 was &lt;a href=&quot;http://clang.llvm.org/docs/Modules.html&quot;&gt;LLVM Modules&lt;/a&gt;. One of the improvements that modules brings is the ability to automatically link any system frameworks that you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#import&lt;/code&gt;. This is &lt;strong&gt;awesome&lt;/strong&gt;, and it’s one less thing you now have to look after.&lt;/p&gt;

&lt;p&gt;As long as you’re only keeping system frameworks in that group, you can delete it. &lt;strong&gt;Yes, delete the entire “Frameworks” group&lt;/strong&gt;. Just ensure that you’ve enabled &lt;em&gt;Link Frameworks Automatically&lt;/em&gt; in your Xcode project’s settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-project-settings-lfa.png&quot; alt=&quot;Xcode project settings showing 'Link Frameworks Automatically' setting&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re on iOS, you will need to ensure that &lt;em&gt;“Enable Modules (C and Objective-C)”&lt;/em&gt; is also set &lt;em&gt;“Yes”&lt;/em&gt; or this tip won’t work. OS X works either way. 
&lt;cite&gt;&lt;a href=&quot;https://twitter.com/_psonice/status/455308002229518336&quot;&gt;Thanks to Chris Wood for pointing this out&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tidy-your-schemes&quot;&gt;Tidy your schemes&lt;/h2&gt;

&lt;p&gt;When you open up your project’s schemes menu, do you see a bunch of schemes from third party projects in there?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-schemes-menu-super-cluttered.png&quot; alt=&quot;Xcode schemes menu showing many schemes&quot; class=&quot;center&quot; width=&quot;265&quot; height=&quot;282&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To clean them up, go to &lt;em&gt;Product → Scheme → Manage Schemes…&lt;/em&gt; and uncheck &lt;em&gt;Show&lt;/em&gt; for any that you don’t want to see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-schemes-menu-deps-removed.png&quot; alt=&quot;Xcode schemes menu showing just the important schemes&quot; class=&quot;center&quot; width=&quot;265&quot; height=&quot;182&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The caveat is that unless you check the “Shared” column, these settings will be reset if your user project settings are ever reset. It’s easy enough to reapply.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;schemes-for-unit-tests-are-unnecessary&quot;&gt;Schemes for unit tests are unnecessary&lt;/h2&gt;

&lt;p&gt;Older projects often show schemes for any unit test bundles you have in your project — you don’t actually need to show them at all!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was necessary under Xcode 4 to have separate schemes for your test targets so that &lt;abbr title=&quot;Continuous Integration&quot;&gt;CI&lt;/abbr&gt; servers could find and run them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcodebuild&lt;/code&gt; didn’t support the “test” action until Xcode 5).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As long as your test targets specify their &lt;em&gt;Target Dependencies&lt;/em&gt; properly, you can just go to &lt;em&gt;Product → Scheme → Manage Schemes…&lt;/em&gt; and delete any test schemes that are listed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-schemes-menu-clean.png&quot; alt=&quot;Xcode schemes menu looking super sharp&quot; class=&quot;center&quot; width=&quot;248&quot; height=&quot;142&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow, what an improvement. And no loss of functionality!&lt;/p&gt;

&lt;h2 id=&quot;sort-your-classes&quot;&gt;Sort your classes&lt;/h2&gt;

&lt;p&gt;This is a simple one, but manually ordering your classes and groups is one way to waste a lot of time. Why not just right click on a group/project in the Xcode navigator and select &lt;em&gt;Sort Files By Name&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode-context-menu-sort-files-by-name.png&quot; alt=&quot;Xcode context menu showing 'Sort Files By Name' highlighted&quot; class=&quot;center&quot; width=&quot;283&quot; height=&quot;411&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;simple-is-good&quot;&gt;Simple is good&lt;/h2&gt;

&lt;p&gt;Hopefully these tips have helped you clean up your Xcode project a little. Hopefully you’ve also removed a few things you don’t really need to see from your line of sight, freeing up a little bit of brain power for something else!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft: Redux (Build 2014)</title>
   <link href="https://tonyarnold.com/2014/04/08/microsoft-redux.html"/>
   <updated>2014-04-08T00:00:00+10:00</updated>
   <id>https://tonyarnold.com/2014/04/08/microsoft-redux</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;What’s different though is that it feels like Microsoft is more interested in working with us as a partner whereas Apple has always given off a vibe of just sort of dealing with us because they have to. Maybe that’s a little sour grapes, but as a developer it was a nice change.&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Justin Williams, in “&lt;a href=&quot;http://carpeaqua.com/2014/04/07/build-2014/&quot;&gt;Build 2014&lt;/a&gt;”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t think it’s sour grapes. My experience of dealing with Microsoft last year when I was evaluating Azure was unlike anything I’ve experienced from Apple in my years of being a registered developer. There were personal calls from Microsoft, an assigned platform expert who actually worked &lt;em&gt;on&lt;/em&gt; the Azure platform and tweets and offers of help from the top of the Microsoft development food chain here in Australia.&lt;/p&gt;

&lt;p&gt;In my years of developing for Apple platforms, I could count on one hand the number of times I’ve had direct communication with an engineer who was actually working on the product I was talking to them about. Most of my contact comes through a small cadre of very proactive Apple engineers on Twitter (of which I’m very appreciative), and usually in response to one of my trademarked “Angry Tony Meltdowns™”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With things like C#, the Rosyln compiler/frameworks, and the modern WinRT runtime, it feels like Microsoft is way ahead of Apple in the future looking regard. As a developer, I’m jealous of a lot of the technologies coming out of Microsoft.&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Justin Williams, in “&lt;a href=&quot;http://carpeaqua.com/2014/04/07/build-2014/&quot;&gt;Build 2014&lt;/a&gt;”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I feel this, too. For a company with as much money, and as many insanely smart people as Apple has, the amount of energy they expend on developer tools, APIs and languages still &lt;em&gt;seems&lt;/em&gt; quite low next to Microsoft. Of course, that could just be my perception.&lt;/p&gt;

&lt;p&gt;All that aside, this is a conversation that’s played out many times on Twitter in the past and the simple reasoning that emerges is that at present, Apple doesn’t appear to place much value in the experience developers have when  dealing with Apple.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;swear&lt;/em&gt; it’s not sour grapes. Just… spend some of those billions on looking after the tribes of developers that supported you on the way up, OK?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Speeding up Jekyll's Latent Semantic Mapping on OS X</title>
   <link href="https://tonyarnold.com/2014/03/27/speeding-up-jekylls-latent-semantic-mapping.html"/>
   <updated>2014-03-27T14:55:00+11:00</updated>
   <id>https://tonyarnold.com/2014/03/27/speeding-up-jekylls-latent-semantic-mapping</id>
   <content type="html">&lt;p&gt;Running Jekyll with Latent Semantic Indexing (or &lt;abbr title=&quot;Latent Semantic Indexing&quot;&gt;LSI&lt;/abbr&gt;) on a site of only 20-30 pages can take 5-10 minutes on a reasonably powerful Mac. I got tired of having to wait or isolate individual posts to get on with writing, so I took Jekyll’s recommendation and installed the &lt;a href=&quot;http://www.gnu.org/software/gsl/&quot;&gt;&lt;abbr title=&quot;GNU's Not Unix!&quot;&gt;GNU&lt;/abbr&gt; Scientific Library&lt;/a&gt; (or &lt;abbr title=&quot;GNU Scientific Library&quot;&gt;GSL&lt;/abbr&gt;).&lt;/p&gt;

&lt;p&gt;After properly installing &lt;abbr title=&quot;GNU Scientific Library&quot;&gt;GSL&lt;/abbr&gt; on my MacBook Pro, &lt;strong&gt;building my site went from over 5 minutes for a site with about 100 posts, to under 5 seconds&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You’re using (or want to use) Jekyll’s &lt;abbr title=&quot;Latent Semantic Indexing&quot;&gt;LSI&lt;/abbr&gt; and related posts function&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/au/app/xcode/id497799835?mt=12&quot;&gt;Xcode&lt;/a&gt; (and most likely the command-line tools)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby, RubyGems and Bundler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;instructions&quot;&gt;Instructions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;abbr title=&quot;GNU Scientific Library&quot;&gt;GSL&lt;/abbr&gt; via &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ brew install gsl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you don’t already have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; for your Jekyll site, create one that looks similar to this:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; source 'https://rubygems.org'

 gem 'jekyll'
 gem 'gsl'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you already have a Gemfile, the important lines are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;narray&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsl&lt;/code&gt;. Be sure to include the git repository links, as these contain my fixes to compile on OS X 10.9 “Mavericks”.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now use Bundler to install the dependencies on your Mac:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cd {YOUR SITE'S FOLDER}
 $ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It’s probably worth while looking into a tool like &lt;a href=&quot;http://rvm.io/&quot;&gt;&lt;abbr title=&quot;Ruby Version Manager&quot;&gt;RVM&lt;/abbr&gt;&lt;/a&gt;, &lt;a href=&quot;http://rbenv.org&quot;&gt;rbenv&lt;/a&gt; or similar that will let you create gemsets so that you don’t pollute the system rubygems unnecessarily.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now start up Jekyll and activate &lt;abbr title=&quot;Latent Semantic Indexing&quot;&gt;LSI&lt;/abbr&gt; (add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--watch&lt;/code&gt; if you want to rebuild on any change to your content):&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ jekyll serve --lsi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make yourself a coffee with all the extra time you’re going to save not sitting around waiting for the &lt;abbr title=&quot;Latent Semantic Indexing&quot;&gt;LSI&lt;/abbr&gt; indexer to finish!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Et voilà! Super speedy site rebuilds with more intelligent related posts for each page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Refresh, read, refresh, read</title>
   <link href="https://tonyarnold.com/2013/12/13/refresh-read-refresh-read.html"/>
   <updated>2013-12-13T21:00:00+11:00</updated>
   <id>https://tonyarnold.com/2013/12/13/refresh-read-refresh-read</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Since I wrote this post, my views have softened quite a bit and I’m actively using and participating on Twitter again. I’m leaving this up because revising history doesn’t change what I actually felt at the time.
I ended up having a month long break from Twitter and found the “off switch” on the constant reload cycle I was trapped in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the topics that &lt;a href=&quot;http://nsbrief.com/111-tony-arnold/&quot;&gt;Saul and I discussed on NSBrief&lt;/a&gt; was my posts on Twitter, and how they tended to be a bit cranky. As I mentioned in the podcast, I have used Twitter in the past to vent about the ‘unimportant’ aspects of my day-to-day life that get to me — so much so that one of my peers has anonymously created the &lt;a href=&quot;http://twitter.com/TonyArnoldsRage&quot;&gt;TonyArnoldsRage&lt;/a&gt; account &lt;em&gt;(Be sure to visit the account just to marvel at the high art of my face pasted onto the Hulk’s body!)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I realised shortly after the NSBrief episode that while the stream of information going across my timeline in Twitter was at times informative, it was tending more and more toward negativity. And I wasn’t getting much back from it in return — in fact, I’ve pretty much stopped communicating effectively across all of my online channels.&lt;/p&gt;

&lt;p&gt;None of my ideas or thoughts were being presented in a way that helped others understand them, and I was finding that I wasn’t bothering to use any of my critical thinking skills. My communication had essentially turned into a steady stream of knee jerk reactions to the refresh-read-refresh-read cycle.&lt;/p&gt;

&lt;h2 id=&quot;thats-not-healthy&quot;&gt;That’s not healthy.&lt;/h2&gt;

&lt;p&gt;I’m a lucky guy – gosh I could rattle off the amazing things in my life that I’m thankful for. I’m not spiritual, and &lt;strong&gt;I believe that everything I have in my life is a direct result of my actions&lt;/strong&gt;. So if something is wrong, it’s up to me to make a change for the better. I struggled with why I had become so negative on Twitter: I actually got pretty despondent about it, and last week decided that the best thing I could do was to &lt;a href=&quot;https://twitter.com/tonyarnold/status/407798899370254336&quot;&gt;stop being quite so active on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A week in, it’s been a good chance to reevaluate how I communicate online. A big red reset switch on the content reloading, and on my enthusiasm for communication. I look forward to writing on my blog and actually taking the time to explain my thoughts on topics that I previously would have muddily explained in 140 character quips on Twitter. I’m getting more work done.&lt;/p&gt;

&lt;p&gt;I’ve come to the conclusion that &lt;strong&gt;Twitter’s activity stream is nothing more than a constant distraction to what’s important&lt;/strong&gt;. It’s a channel of communication that’s ineffective, hard to follow and littered with advertising and nastiness. It has moments of usefulness and supportiveness, but it’s not the cohesive community that it used to be.&lt;/p&gt;

&lt;p&gt;I’m a bit of a Johnny-come-lately to this party, as &lt;a href=&quot;http://inessential.com/2013/12/12/the_stream&quot;&gt;Brent Simmons came to a similar conclusion months ago&lt;/a&gt;, and came out the other side with a reasonable balance of still wanting to interact on Twitter, but recognising it’s lack of value. I agree with Brent: &lt;strong&gt;the magic has gone out of Twitter, and I don’t think it’s coming back&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some of you will see this situation as an issue of self control, and you’re not entirely wrong. I see it as an opportunity to get my online persona back in sync with who I am in real life and contribute in a way that makes me happy and fulfilled.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I was on NSBrief!</title>
   <link href="https://tonyarnold.com/2013/12/13/i-was-on-nsbrief.html"/>
   <updated>2013-12-13T20:30:00+11:00</updated>
   <id>https://tonyarnold.com/2013/12/13/i-was-on-nsbrief</id>
   <content type="html">&lt;p&gt;A few weeks back, Saul Mora and I sat down for a (virtual) chat on his podcast, &lt;a href=&quot;http://nsbrief.com/&quot;&gt;NSBrief&lt;/a&gt;. It was supposed to be a conversation about being involved in open source projects, but the conversation ended up veering into matters of life and importance.&lt;/p&gt;

&lt;p&gt;I got a wee bit rambl-ey, as some of the topics we were discussing were still pretty raw for me (in particular my health over the last few years), but I enjoyed the conversation so I think &lt;a href=&quot;http://nsbrief.com/111-tony-arnold/&quot;&gt;it’s worth a listen if you haven’t done so already&lt;/a&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>50ft Radio</title>
   <link href="https://tonyarnold.com/2013/12/12/50ft-radio.html"/>
   <updated>2013-12-12T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2013/12/12/50ft-radio</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://images.fiftyfootshadows.net/2013/12/vol9-700x350.jpg&quot; alt=&quot;50ft Shadows Volume 9&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been reading &lt;a href=&quot;http://fiftyfootshadows.net/&quot;&gt;John Carey’s Fifty Foot Shadows&lt;/a&gt; for a couple of years now, and in addition to his amazing photography and wallpapers, John posts interesting and new music in the form of “&lt;a href=&quot;http://fiftyfootshadows.net/category/music/&quot;&gt;50ft Radio&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;If you haven’t visited the site before, &lt;a href=&quot;http://fiftyfootshadows.net/2013/12/12/50ft-radio-volume-nine/&quot;&gt;Volume 9 has just been posted&lt;/a&gt; so you should grab your best set of headphones and have a listen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CoreData.next</title>
   <link href="https://tonyarnold.com/2013/10/13/coredata_dot_next.html"/>
   <updated>2013-10-13T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2013/10/13/coredata_dot_next</id>
   <content type="html">&lt;p&gt;I’ve been using Core Data since it was introduced in Mac OS X 10.4 “Tiger”, and it’s my first choice anytime I need to save structured data in my apps.&lt;/p&gt;

&lt;p&gt;The problem is, &lt;strong&gt;everyone uses Core Data because there’s nothing better&lt;/strong&gt;. It’s the best way to persist structured data on iOS and OS X, but it’s not actually much fun to implement and has many warts. &lt;strong&gt;To be utilised properly, Core Data requires a level of experience and knowledge that’s simply not reasonable to expect from people starting out with Cocoa development&lt;/strong&gt; — although it does it’s best to convince you otherwise with the visual Core Data Modeller in Xcode.&lt;/p&gt;

&lt;p&gt;Something as base as saving data should be much, much easier.&lt;/p&gt;

&lt;p&gt;Before I really get stuck in, let me be clear: there are probably legitimate reasons why Core Data does all of the things I highlight. I’m not insinuating for a minute that any of my suggestions are even technically possible — this is what I would investigate for a major revision to Core Data (were it my call, which it is not).&lt;/p&gt;

&lt;h2 id=&quot;setting-up-is-too-much-work&quot;&gt;Setting up is too much work&lt;/h2&gt;

&lt;p&gt;Creating a usable Core Data stack for your application by hand requires far too much boilerplate. Apple should be providing a very basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[NSCoreDataStack newStackWithOptions:…]&lt;/code&gt; or something similar that gets your app up and running with the best possible set of defaults.&lt;/p&gt;

&lt;p&gt;Libraries like MagicalRecord provide this now, but it seems odd that the Core Data framework does little to aid setting up the stack in a recommended manner.&lt;/p&gt;

&lt;h2 id=&quot;its-workarounds-all-the-way-down-and-then-you-hit-nsmangedobject&quot;&gt;It’s workarounds all the way down and then you hit NSMangedObject&lt;/h2&gt;

&lt;p&gt;Yes, I meant to spell it that way.&lt;/p&gt;

&lt;p&gt;In the last couple of years, Apple have made attempts to simplify and extend some parts of Core Data, including the addition of parent contexts, and methods to help run your code on the correct thread for a specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt; (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-(void)performBlock:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-(void)performBlockAndWait:&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The problem is, &lt;strong&gt;these additions are essentially workarounds for problems that shouldn’t really be the concern of the developer&lt;/strong&gt; using the API.&lt;/p&gt;

&lt;p&gt;The additions I cited above all stem from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; instances not being thread safe. I’d rather see Apple create new, non-backwards compatible API to solve this than continue to patch underlying design issues with new API. I get this one is not trivial. Threading never is.&lt;/p&gt;

&lt;h2 id=&quot;except-the-exceptions&quot;&gt;Except the exceptions&lt;/h2&gt;

&lt;p&gt;If you’ve used Core Data, chances are you’ve seen it do it’s best impression of a monkey in a cage. It flings internal NSExceptions around like a monkey with poop. Debugging a Core Data app with lldb intercepting all exceptions is an exercise in frustration and sifting through “what’s yours” and “what’s mine”.&lt;/p&gt;

&lt;p&gt;I’d like to see all exceptions thrown by the framework properly caught and dealt with before the developer ever sees them in Xcode.&lt;/p&gt;

&lt;h2 id=&quot;easier-handling-of-binary-data&quot;&gt;Easier handling of binary data&lt;/h2&gt;

&lt;p&gt;One of the common things new users of Core Data try to do is store images and other data in their SQLite persistent store. It’s entirely possible to do so, and the addition of external binary representations for Binary attributes helps improve performance when doing so.&lt;/p&gt;

&lt;p&gt;The issue is, accessing that data can have significant memory implications as you can’t really take advantage of any of the great optimisations Apple has made to image/file loading without first dumping the data of the attribute into a temporary file outside of your store.&lt;/p&gt;

&lt;p&gt;Want to use any of the audio visual frameworks to access media that you’ve stored in your persistent store? Forget it. They all need a URL or file path.&lt;/p&gt;

&lt;p&gt;Allowing direct access to binary data attributes external file URLs (and allowing access to read that file via the URL) would greatly simplify this scenario, and I’d imagine it would reduce disk I/O.&lt;/p&gt;

&lt;h2 id=&quot;nsfetchedresultscontroller-on-both-platforms&quot;&gt;NSFetchedResultsController on both platforms&lt;/h2&gt;

&lt;p&gt;I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSFetchedResultsController&lt;/code&gt; in almost all of my iOS apps. I set it up and forget about it, and it takes care of marshalling any changes to my datasources. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSArrayController&lt;/code&gt; is the prototype that we have on OS X, and it’s just not setup to handle things like animating UI changes in table views and the like.&lt;/p&gt;

&lt;p&gt;A simple, fast way to automatically query and update a datasource and handle discrete changes on both platforms would be a huge time saver. Making it capable of doing it’s work nicely on a background thread would be a big win, too.&lt;/p&gt;

&lt;h2 id=&quot;performance-and-simplicity&quot;&gt;Performance and simplicity&lt;/h2&gt;

&lt;p&gt;Any improvements to performance in any API are always a good thing, but Core Data has some specific areas that could use attention. Anything involving batch operations could use a bit of love (as outlined by Brent in his &lt;a href=&quot;http://inessential.com/2013/10/05/vesper_sync_diary_2_core_data&quot;&gt;series of posts on Core Data in Vesper&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Honestly though, I think Core Data.next needs to be simpler to implement and interact with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s a lot in Core Data right now that just seems to be there for the sake of working around the lack of thread safety&lt;/li&gt;
  &lt;li&gt;I know it’s not everyone’s cup of tea, but simpler queries and searches would be ace&lt;/li&gt;
  &lt;li&gt;Roll the work Wolf has done on &lt;a href=&quot;http://rentzsch.github.io/mogenerator/&quot;&gt;mogenerator&lt;/a&gt; into Xcode — the attribute structs and entityName methods should be there for all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; subclasses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all pie in the sky, but it’s nice to dream right?&lt;/p&gt;

&lt;p&gt;And maybe to implement. Maybe.&lt;/p&gt;

&lt;p&gt;Hit me up on &lt;a href=&quot;http://twitter.com/tonyarnold/&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;http://alpha.app.net/tonyarnold/&quot;&gt;App.net&lt;/a&gt; with your thoughts, or even better — write a post in response.&lt;/p&gt;

&lt;h2 id=&quot;responses&quot;&gt;Responses&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://deusty.blogspot.com.au/2014/01/response-coredatanext.html&quot;&gt;Robbie Hanson has answered my post&lt;/a&gt; putting forward &lt;a href=&quot;https://github.com/yaptv/YapDatabase&quot;&gt;YapDatabase&lt;/a&gt; as a viable replacement (and improvement) for Core Data. I’m keen to have a look at it for my next project.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Commas, parentheses and exclamations — Oh my!</title>
   <link href="https://tonyarnold.com/2013/08/24/commas-parentheses-and-exclamations-oh-my.html"/>
   <updated>2013-08-24T00:00:00+10:00</updated>
   <id>https://tonyarnold.com/2013/08/24/commas-parentheses-and-exclamations-oh-my</id>
   <content type="html">&lt;p&gt;Brent Simmons recently posted a piece titled “&lt;a href=&quot;http://inessential.com/2013/08/14/commas_for_developers&quot;&gt;Commas for Developers&lt;/a&gt;” on his blog:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You have an array of options: semicolons, colons, dashes, and words such as “and” and “but.” You can turn independent clauses into dependent clauses. But you can’t jam two sentences together with a comma.&lt;/p&gt;

  &lt;p&gt;When you do, my opinion of and trust in your work goes down.&lt;/p&gt;

  &lt;p&gt;This is not, by the way, some prissy thing about proper manners. Fuck that shit. I’m not trying to squash your voice. This is about quality and trust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sorry Brent but this just makes me want to write less (and &lt;strong&gt;that&lt;/strong&gt; is shit).&lt;/p&gt;

&lt;p&gt;By all means encourage people to improve their writing skills, but quality is about so many more things than the writer’s ability to correctly punctuate in your native tongue.&lt;/p&gt;

&lt;p&gt;I admire the way that developers like &lt;a href=&quot;http://mattgemmell.com&quot;&gt;Matt Gemmell&lt;/a&gt; have made a concerted effort to improve their writing in public. The thing that appears to have been forgotten here is that it’s a process. Were Matt’s pieces half as good two years ago? I wouldn’t think so — he’s had plenty of practice in that time.&lt;/p&gt;

&lt;p&gt;I am sad to see &lt;a href=&quot;http://mattgemmell.com/2013/08/15/language-skills/&quot;&gt;Matt “wholeheartedly” agrees with Brent’s stance&lt;/a&gt;. Surely there’s a way to promote the same message in a positive manner?&lt;/p&gt;

&lt;p&gt;Here’s my take: &lt;strong&gt;Don’t be afraid to write, even if your ability to do so is out of sync with your ideas and passion — you’ll get better by writing and reading more&lt;/strong&gt;. I agree that correct spelling and punctuation is a sign of quality, but it’s hardly the only factor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nb. Please feel free to let me know where I’ve incorrectly punctuated — I paid little attention in my English classes, and I could do with the feedback.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WWDC 2013 Tips</title>
   <link href="https://tonyarnold.com/2013/05/29/wwdc-2013-tips.html"/>
   <updated>2013-05-29T01:05:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/29/wwdc-2013-tips</id>
   <content type="html">&lt;p&gt;Spurred on by &lt;a href=&quot;https://alpha.app.net/bmf/post/6118206&quot;&gt;Mike Lee’s post on App.net&lt;/a&gt; about his &lt;a href=&quot;http://mur.mu.rs/616&quot;&gt;tips and tricks for WWDC&lt;/a&gt;, here are a few of my tips for WWDC from the perspective of an Aussie traveller, and long time attendee:&lt;/p&gt;

&lt;p&gt;tl;dr; Enjoy yourself, make new friends and learn.&lt;/p&gt;

&lt;h2 id=&quot;the-keynote&quot;&gt;The Keynote&lt;/h2&gt;
&lt;p&gt;Everyone remembers the first year they joined the Presidio hopefuls and lined up at some ungodly hour of the morning to get a passable seat in the main room.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s OK to &lt;strong&gt;be really excited&lt;/strong&gt;. You’ve come a long way, and waited a long time to be here;&lt;/li&gt;
  &lt;li&gt;You’re surrounded by thousands of people who do what you do, and generally speaking &lt;em&gt;love doing what you do&lt;/em&gt; — &lt;strong&gt;chat, make friends, and enjoy the atmosphere&lt;/strong&gt;!&lt;/li&gt;
  &lt;li&gt;It’s a long, cold wait if you’re going to brave the San Francisco night and line up early. &lt;strong&gt;Wear a jacket or a jumper&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Line up with buddies. If you don’t have some, make some in the line. I’ll reiterate: it’s a long wait. &lt;strong&gt;Nature is going to come calling long before you get a seat&lt;/strong&gt;, and having someone mind your spot will avoid the inevitable stress of reclaiming your spot in line;&lt;/li&gt;
  &lt;li&gt;Be cool: there’s a crush at the end where a gaggle of over-excited, over-tired developers will push everyone in their path out of the way to get to a better seat. &lt;strong&gt;Don’t be the jerk, but also don’t get stressed about being in the main hall&lt;/strong&gt; — the screens in the overflow rooms give you a better view of the proceedings than a seat in Presidio will (unless you’re a VIP or member of the media);&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;state-of-the-union&quot;&gt;State of the Union&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;In my opinion, the State of the Unions are far more interesting than the keynote: They’re my favourite sessions!. These sessions are where Apple kicks off the week by talking the changes to the developer tools, Core OS, Graphics, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Don’t snore&lt;/strong&gt;. Seriously. It shows a massive lack of respect for the presenter, and for your fellow attendees. If you’re getting tired, grab a coffee or go grab a bean bag and have a quick nap.&lt;/li&gt;
  &lt;li&gt;If there’s a session you really want to see, &lt;strong&gt;be prepared to leave the previous session 10-15 minutes early&lt;/strong&gt;. There’s rarely enough room in the popular sessions. Remember that almost everything is recorded, and will be available for download after the conference;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The seats are hard&lt;/strong&gt;. Your arse will fall asleep;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t fret about skipping a session to spend time with interesting people&lt;/strong&gt;, or to spend time in the labs. Those are things you can’t do after the conference — watching session videos is something you can do later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;parties&quot;&gt;Parties&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;San Fran has some really interesting bars, and there’ll be free drinks at some of the events — enjoy yourself, but take it from a seasoned conference alcoholic: &lt;strong&gt;you’ll regret getting blind drunk&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Be a good egg and &lt;strong&gt;talk to people you don’t know&lt;/strong&gt;. Nobody likes a clique;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m looking forward to catching up with old friends, and making a whole bunch of new ones — see you all there!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Minimising Platform-specific code with MVVM</title>
   <link href="https://tonyarnold.com/2013/05/24/minimising-platform-specific-code-with-mvvm-video.html"/>
   <updated>2013-05-24T18:35:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/24/minimising-platform-specific-code-with-mvvm-video</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/jspahrsummers&quot;&gt;Justin Spahr Summers&lt;/a&gt; from GitHub’s Mac team recently gave a talk at &lt;a href=&quot;http://xamarin.com/evolve/2013&quot;&gt;Xamarin’s “Evolve 2013”&lt;/a&gt; conference:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;github-halp-app-minimizing-platform-specific-code-with-mvvm&quot;&gt;&lt;a href=&quot;http://xamarin.com/evolve/2013#session-zm59b5yptf&quot;&gt;GitHub Halp App: Minimizing Platform-specific code with MVVM&lt;/a&gt;&lt;/h4&gt;
  &lt;p&gt;Justin is a Mac Developer at GitHub and has contributed to several open source projects released by GitHub, including ReactiveCocoa, an Objective-C port of Microsoft’s Reactive Extensions for .NET. Justin is also a big proponent of using MVVM, and will use GitHub’s internal helpdesk app, Halp, to illustrate how to maximize code re-use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m always interested in different approaches to simplifying my life as a developer, and the GitHub team keep bringing new &amp;amp; interesting ideas to the community.&lt;/p&gt;

&lt;p&gt;I’m keen to try MVVM in my next project.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Half Arsed Class: NSRulerView</title>
   <link href="https://tonyarnold.com/2013/05/24/half-arsed-class-nsrulerview.html"/>
   <updated>2013-05-24T17:04:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/24/half-arsed-class-nsrulerview</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This is a little thing I think I’ll start doing to relieve frustration after working with awfully designed or just plain buggy classes. Half Arsed Class will pick out classes that have pissed me off from AppKit, Foundation and UIKit. Hopefully I’ll also be able to retract these on a semi-regular basis.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s Half Arsed Class is brought to you by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSRulerView&lt;/code&gt; class, which allows you to set a completely custom measurement unit setup so that you can draw rulers against your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSScrollView&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;Sadly, &lt;strong&gt;&lt;a href=&quot;http://www.cocoabuilder.com/archive/cocoa/175535-nsrulerview-subclass-and-drawhashmarksandlabelsinrect-nsrect-rect.html&quot;&gt;there’s no way to actually get those measurement units back&lt;/a&gt;&lt;/strong&gt;. So, if you want to customise how the ticks on your ruler are drawn you’re completely out of luck. &lt;a href=&quot;http://lists.apple.com/archives/cocoa-dev/2011/Aug/msg00471.html&quot;&gt;You’ll have to do all of the calculations, all of the math, and all of the drawing yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSRulerView&lt;/code&gt; also updates as required to reflect the magnification level of the scroll view it’s tied to. Via a private instance variable. With no other piece of the puzzle exposed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*mouth fart noise*&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It gets better! &lt;a href=&quot;http://developer.apple.com/library/mac/DOCUMENTATION/Cocoa/Reference/ApplicationKit/Classes/NSRulerView_Class/Reference/Reference.html#//apple_ref/occ/instm/NSRulerView/drawHashMarksAndLabelsInRect:&quot;&gt;The documentation makes reference to&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If you want to do custom hash-marks and labels you should first look at doing it with a delegate.  You can do whatever kind of custom hash-marks you want through delegation as long as the hash-marks and labels are evenly spaced.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there are no delegate methods that expose anything to do with customising the hash marks. Brilliant QA work there, guys!&lt;/p&gt;

&lt;p&gt;So, if you find yourself thinking “NSRulerView looks like what I need!”, think again. It’s only useful if you want it in exactly the form you find it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.openradar.me/13980710&quot;&gt;Radar filed&lt;/a&gt;: I need a drink.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Getting Started With ReactiveCocoa</title>
   <link href="https://tonyarnold.com/2013/05/23/getting-started-with-reactivecocoa.html"/>
   <updated>2013-05-23T12:35:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/23/getting-started-with-reactivecocoa</id>
   <content type="html">&lt;p&gt;Ash Furrow has put together a great introductory article about &lt;a href=&quot;http://github.com/ReactiveCocoa/ReactiveCocoa/&quot;&gt;ReactiveCocoa&lt;/a&gt; that makes great reading if you’re starting to use RAC in your projects.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simplify delivering RACSignals on the main thread</title>
   <link href="https://tonyarnold.com/2013/05/23/simplify-delivering-racsignals-on-the-main-thread.html"/>
   <updated>2013-05-23T09:56:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/23/simplify-delivering-racsignals-on-the-main-thread</id>
   <content type="html">&lt;p&gt;One of the common things you’ll do when working with &lt;a href=&quot;http://github.com/ReactiveCocoa/ReactiveCocoa/&quot;&gt;ReactiveCocoa&lt;/a&gt; is ensure that signals are delivered on the main thread. This is important when sending signals to user interface elements which (in general on OS X and always on iOS) must be delivered on the main thread.&lt;/p&gt;

&lt;p&gt;Compare:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rulerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tickFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rulerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tickFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoomSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverOnMainThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not a huge saving, but when you’re dealing with complex compositions, I’ve found it does make a difference to a signal’s readability.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ReactiveLessons</title>
   <link href="https://tonyarnold.com/2013/05/13/reactivelessons.html"/>
   <updated>2013-05-13T08:55:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/13/reactivelessons</id>
   <content type="html">&lt;p&gt;In my experience, there are three simple ways to think about using &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa/&quot;&gt;ReactiveCocoa&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As a lovely, simple replacement API for Key-Value Observation;&lt;/li&gt;
  &lt;li&gt;As a way to introduce Functional Reactive Programming (FRP) into Cocoa apps;&lt;/li&gt;
  &lt;li&gt;A hybrid of the two.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-value-observation-done-right&quot;&gt;Key-Value Observation Done Right&lt;/h2&gt;

&lt;p&gt;Here’s the current state of using Key-Value Observation to observe and respond to changes to a string property on my fictional class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In your viewDidLoad/awakeFromNib/init&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
       &lt;span class=&quot;nl&quot;&gt;forKeyPath:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;someString&quot;&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;options:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSKeyValueObservingOptionNew&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;context:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someStringChangeContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In dealloc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
          &lt;span class=&quot;nl&quot;&gt;forKeyPath:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;someString&quot;&lt;/span&gt;
             &lt;span class=&quot;nl&quot;&gt;context:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someStringChangeContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Elsewhere in your class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observeValueForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;
                      &lt;span class=&quot;nf&quot;&gt;ofObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;change&lt;/span&gt;
                       &lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someStringChangeContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;someString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Do a bunch of stuff here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the same thing using ReactiveCocoa:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringChanged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringChanged&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribeNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do a bunch of things here, just like you would with KVO&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s no need to tear down the observer when you’re done, and if you’re only interested in using ReactiveCocoa as a simple replacement for KVO, there you go! “Bam” said the lady.&lt;/p&gt;

&lt;h2 id=&quot;bringing-it-functional-reactive-style&quot;&gt;‘Bringing It’ Functional Reactive Style&lt;/h2&gt;

&lt;p&gt;The real drive behind the GitHub team building ReactiveCocoa is something called “&lt;a href=&quot;http://blog.maybeapps.com/post/42894317939/input-and-output?3ed07280&quot;&gt;Functional Reactive Programming&lt;/a&gt;” (or FRP). I’m the first to admit that I don’t always understand the most elegant way to approach problems in Cocoa apps using FRP, but the basic gist is that you’re removing unnecessary state from your code.&lt;/p&gt;

&lt;p&gt;In the KVO example above, we’re dealing with a string property on a fictional class instance, the actual real-world use of this would not be so abstract. It’s likely that we’re taking a string value from some data source and displaying it in a text field. So here’s that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nameSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someManagedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someTextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nameSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Still with me? Every time the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.someManagedObject.name&lt;/code&gt; attribute changes, that change will automatically propagate to the text field. Conceptually, it’s quite a lot like Cocoa Bindings, but unlike bindings it’s available for use on iOS.&lt;/p&gt;

&lt;p&gt;But that’s still not the real advantage of ReactiveCocoa. Consider this, you have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSDate&lt;/code&gt; property on one of your objects that you’d like to display in a text field. ReactiveCocoa can help you do that, while providing the same binding-style advantages as above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;managedObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;distinctUntilChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someTextFieldForShowingTheDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateSignal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDateFormatter&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;localizedStringFromDate:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;dateStyle:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDateFormatterShortStyle&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;timeStyle:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NSDateFormatterShortStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now any time the date changes on the managed object, the text field will automatically update as well, converting from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSDate&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSString&lt;/code&gt; as it goes. Nifty, hey?&lt;/p&gt;

&lt;h2 id=&quot;danger-high-voltage-reactions&quot;&gt;Danger! High Voltage Reactions&lt;/h2&gt;

&lt;p&gt;So ReactiveCocoa, yay! More succinct code, yay! “Should I be using this right now?” I hear you ask?&lt;/p&gt;

&lt;p&gt;In the course of adopting ReactiveCocoa for use in my own projects, I’ve discovered some not awesome things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thinking about things in an FRP way currently takes longer for complex situations. At least for now, I’m finding I spend a lot less time on the simple interactions between my data and the UI, but a lot longer on complex problems. There’s a lot of abstract thinking and explanations in FRP;&lt;/li&gt;
  &lt;li&gt;It’s really easy to end up with hundreds of lines of subscriptions and maps for more complex UIs — I call this “ReactiveSpaghetti”. I don’t think this problem is unique to ReactiveCocoa, but it’s easier to see it in action when your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- (void)viewDidLoad&lt;/code&gt; method turns into a RACParty;&lt;/li&gt;
  &lt;li&gt;A lot of Xcode and LLDB’s nice debug handling doesn’t work well with ReactiveCocoa. You will be dumped into an untraceable stream of RACSignals and blocks at some point. Don’t even get me started on crash reports that originate from within ReactiveCocoa! There are logging methods built into ReactiveCocoa, but they’re not going to do you any good with a user-uploaded crash log;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So ReactiveCocoa is not all peaches and cream, but to date I’ve also noticed no performance issues and I feel like I’m expressing myself more clearly through RAC-enabled code than I was beforehand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After my experiences, I could happily just stick to using the -subscribeNext: and -map: methods in a very simple, KVO-esque manner.&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>YapDatabase</title>
   <link href="https://tonyarnold.com/2013/05/13/yapdatabase.html"/>
   <updated>2013-05-13T08:05:00+10:00</updated>
   <id>https://tonyarnold.com/2013/05/13/yapdatabase</id>
   <content type="html">&lt;p&gt;There’s been a bit of a buzz on the intertubes today about &lt;a href=&quot;https://github.com/yaptv/YapDatabase&quot;&gt;YapDatabase&lt;/a&gt; as a potential competitor to Core Data. While I don’t think that’s necessarily the case (there aren’t modelling tools and migrations at this stage), it looks like an interesting project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/k7d/status/333659694969278464&quot;&gt;@k7d pointed out on Twitter&lt;/a&gt; that &lt;a href=&quot;https://github.com/cobook/tokyo-kit&quot;&gt;Tokyo Kit&lt;/a&gt; is a much faster alternative (which is based on &lt;a href=&quot;http://fallabs.com/tokyocabinet/&quot;&gt;Tokyo Cabinet&lt;/a&gt; a NoSQL storage engine).&lt;/p&gt;

&lt;p&gt;I’m happy to wait another 3 weeks and &lt;a href=&quot;http://developer.apple.com/wwdc/&quot;&gt;see what Apple has been working on&lt;/a&gt; this past year.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Humankind… ROLL OUT!</title>
   <link href="https://tonyarnold.com/2012/03/05/humankind-roll-out.html"/>
   <updated>2012-03-05T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2012/03/05/humankind-roll-out</id>
   <content type="html">&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;//www.youtube.com/embed/e7DEw70LVWs?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; class=&quot;widescreen&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I don’t care that I’ll never be eligible to join NASA — having Peter Cullen (aka Optimus Prime) narrate this commercial makes me want to all the same. So dramatic!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dinobots!</title>
   <link href="https://tonyarnold.com/2012/03/05/dinobots.html"/>
   <updated>2012-03-05T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2012/03/05/dinobots</id>
   <content type="html">&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;//www.youtube.com/embed/C3E358n7pcI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; class=&quot;widescreen&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you were born in the 80’s like I was, and this doesn’t excite the shit out of you then you’re either:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not a fan of Transformers (ie. you have no pulse);&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No, I don’t have a word for it. I’m going back to watch the trailer again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Monty Python's Life of Tony</title>
   <link href="https://tonyarnold.com/2012/03/04/monty-pythons-life-of-tony.html"/>
   <updated>2012-03-04T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2012/03/04/monty-pythons-life-of-tony</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/hospital_nights-4f536e3f0583a.jpg&quot; alt=&quot;Hospital lights at night&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have a few simple rules for my interactions online:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No politics&lt;/li&gt;
  &lt;li&gt;No religion&lt;/li&gt;
  &lt;li&gt;Nothing overly personal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reputation is a funny, slippery thing and any one of those three topics can (in the eyes of people with differing views) make or break a reputation rather quickly. I like to break all three of my rules regularly.&lt;/p&gt;

&lt;h2 id=&quot;this-post-its-a-3&quot;&gt;This post, it’s a #3.&lt;/h2&gt;

&lt;p&gt;Life has a funny way of putting things into perspective. The last 4 months of my life have been the hardest, yet the most wonderful that I have ever had. Here’s a recap (with pictures for the slower readers):&lt;/p&gt;

&lt;h2 id=&quot;december-2011&quot;&gt;December, 2011:&lt;/h2&gt;

&lt;p&gt;I spent the first week of December cooped up in a hospital room, being infused with what my Doctor liked to refer to as a “last ditch effort to get me to the altar on time”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/infused-4f536818d36ce.jpg&quot; alt=&quot;Cyclosporine infusion&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;December 17, 2011 is (to date) the happiest day I’ve ever experienced. Surrounded by a small group composed of our immediate families and our closest friends, Leah and I became (as we affectionately call it) “Husbandit” and “Wife-o-saurus”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/under_a_tree-4f5368ab21a97.jpg&quot; alt=&quot;Married under a big ol' tree!&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/leah_and_tony-4f5369c67be51.jpg&quot; alt=&quot;Leah and Tony getting their marriage on!&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leah and I also had a little surprise that we’d been keeping to ourselves. &lt;strong&gt;We’re going to be parents this coming June&lt;/strong&gt;. &lt;em&gt;I’m hoping for X-men-esque mutant superpowers from my unborn child&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/bun_oven-4f5367c203653.jpg&quot; alt=&quot;Bun in the oven — 12 week scan&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;january-2012&quot;&gt;January, 2012:&lt;/h2&gt;

&lt;p&gt;My Doctor’s last ditch effort worked, but sadly didn’t hold. I was admitted to hospital as an emergency case on January 25, 2012. I’ve suffered from a chronic illness for most of my adult life —- I battled against &lt;a href=&quot;http://en.wikipedia.org/wiki/Ulcerative_Colitis&quot;&gt;Ulcerative Colitis&lt;/a&gt; for over 11 years. The illness became so severe that the damage to my internal organs was beyond repair. On January 27, I had my large intestine removed in the first of what will be three rounds of surgery before the end of this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/tony_in_hospital-4f536a69ac281.jpg&quot; alt=&quot;Tony in hospital, post surgery&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The great news? At the end of the year, I’ll be completely cured of the colitis &lt;strong&gt;and&lt;/strong&gt; I’ll be a Dad. To be honest, I couldn’t ask for much more.&lt;/p&gt;

&lt;p&gt;What these last few months have shown me is that no matter how bad things get, life has a way of balancing itself out. You can either sit back and let everything happen to you, or you can love and embrace the great things you’ve been given and learn to tolerate the not-so-great.&lt;/p&gt;

&lt;p&gt;OK, that’s enough of that — back to your regularly-scheduled mix of technical and non-existent posting!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xcode syntax highlighting fix</title>
   <link href="https://tonyarnold.com/2011/10/10/xcode-syntax-highlighting-fix.html"/>
   <updated>2011-10-10T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2011/10/10/xcode-syntax-highlighting-fix</id>
   <content type="html">&lt;p&gt;Over the last couple of months of use of Xcode 4, I’ve found that (at times) everyone’s favourite Objective-C IDE loses its way while making code pretty and colourful. I’ve filed radars about it, but I could never reliably and consistently reproduce the problem so the Xcode gnomes at Apple couldn’t either.&lt;/p&gt;

&lt;p&gt;If you’re having trouble with syntax highlighting in your Xcode projects, please try this tip from &lt;a href=&quot;http://stackoverflow.com/questions/2138047/xcode-code-loses-syntax-coloring/7676487#7676487&quot;&gt;Lars Schneider&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Increase the indexing log level by opening Terminal.app and executing the following command:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaults write com.apple.dt.Xcode IDEIndexingClangInvocationLogLevel 3&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open Console.app and search for “&lt;strong&gt;Xcode&lt;/strong&gt;” — specifically for “file not found” errors for header files mentioned in your PCH (Pre-Compiled Header)&lt;/li&gt;
  &lt;li&gt;Fix any problems that are reported in the console logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lars mentions adding “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(SRCROOT)/**&lt;/code&gt;” to your project header search paths in his answer, but I didn’t find that to be necessary.&lt;/p&gt;

&lt;p&gt;The good news is that Xcode 4.2 seems to improve this situation (and a bunch of others), so grab a copy when it’s released later this week.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/rafifyalda/status/123154154842632192&quot;&gt;Rafif Yalda for pointing me in the direction of Lars’ Stack Overflow post this morning&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Mission Control Tips</title>
   <link href="https://tonyarnold.com/2011/07/22/mission-control-tips.html"/>
   <updated>2011-07-22T00:00:00+10:00</updated>
   <id>https://tonyarnold.com/2011/07/22/mission-control-tips</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/missioncontrolicon-1311311856.png&quot; alt=&quot;class: left;; style: margin-top:5px;background-image:none;border-width:0px;background-color:transparent;-webkit-box-shadow:none;-mozilla-box-shadow:none;box-shadow:none;; alt: Mission Control Icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve just finished installing your shiny new copy of &lt;a href=&quot;http://www.apple.com/macosx/&quot;&gt;Mac OS X Lion&lt;/a&gt;, here are a few tips for Apple’s replacement for Spaces and Exposé — “&lt;a href=&quot;http://www.apple.com/macosx/whats-new/mission-control.html&quot;&gt;Mission Control&lt;/a&gt;”. For each of these tips, I’m going to assume you’ve created at least one new Desktop in Mission Control — if you haven’t, do that now.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-desktop-for-an-application-or-window&quot;&gt;Create a new Desktop for an application or window##&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Activate Mission Control;&lt;/li&gt;
  &lt;li&gt;Click and hold on either an individual window, or an application’s icon;&lt;/li&gt;
  &lt;li&gt;Drag the selected item up the top right corner of your display — as you do this, a slightly transparent Desktop will slide out from the right-hand side of the screen with a “+” on it;
 &lt;img src=&quot;http://static.tonyarnold.com/createdesktop-1311313098.png&quot; alt=&quot;Creating a new Desktop using Mission Control&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Drop the selected item onto this new Desktop;&lt;/li&gt;
  &lt;li&gt;Bingo! You have a new Desktop, with your selected items on it — simply click the new Desktop to switch to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-different-desktop-images-for-each-desktop&quot;&gt;Set different desktop images for each Desktop##&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Switch to the Desktop you want to change the desktop picture on;&lt;/li&gt;
  &lt;li&gt;Launch ‘&lt;strong&gt;System Preferences.app&lt;/strong&gt;’;
 &lt;img src=&quot;http://static.tonyarnold.com/sysprefsappicon-1311313183.png&quot; alt=&quot;style: margin-top:5px;background-image:none;border-width:0px;background-color:transparent;-webkit-box-shadow:none;-mozilla-box-shadow:none;box-shadow:none;; alt: System Preferences application icon in Finder&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Go to ‘&lt;strong&gt;Desktop &amp;amp; Screen Saver&lt;/strong&gt;’;
 &lt;img src=&quot;http://static.tonyarnold.com/desktopsysprefs-1311313127.png&quot; alt=&quot;Desktop &amp;amp; Screen Saver system preferences icon highlighted&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Set your desktop image the same way you always do;&lt;/li&gt;
  &lt;li&gt;Move the ‘&lt;strong&gt;Desktop &amp;amp; Screen Saver&lt;/strong&gt;’ window to the next Desktop by dragging it to the edge of your screen and holding it there for a second or two;&lt;/li&gt;
  &lt;li&gt;Change the desktop image on that Desktop;
 &lt;img src=&quot;http://static.tonyarnold.com/mcdesktoppics-1311314159.png&quot; alt=&quot;Mission Control with different desktop images&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Yell our ‘hooray!’ a little bit, cause it’s pretty cool to have different desktop images on each of your Desktops (&lt;em&gt;‘Hooray’ completely optional&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-hotkeys-to-go-directly-to-each-desktop&quot;&gt;Set hotkeys to go directly to each Desktop##&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Launch ‘&lt;strong&gt;System Preferences.app&lt;/strong&gt;’;
 &lt;img src=&quot;http://static.tonyarnold.com/sysprefsappicon-1311313183.png&quot; alt=&quot;style: margin-top:5px;background-image:none;border-width:0px;background-color:transparent;-webkit-box-shadow:none;-mozilla-box-shadow:none;box-shadow:none;; alt: System Preferences application icon in Finder&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Go to ‘&lt;strong&gt;Keyboard&lt;/strong&gt;’;
&lt;img src=&quot;http://static.tonyarnold.com/keyboardsysprefs-1311313159.png&quot; alt=&quot;Keyboard system preferences icon highlighted&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Select the ‘&lt;strong&gt;Keyboard Shortcuts&lt;/strong&gt;’ tab;&lt;/li&gt;
  &lt;li&gt;From the source list on the left, select ‘&lt;strong&gt;Mission Control&lt;/strong&gt;’;&lt;/li&gt;
  &lt;li&gt;The final entries in the list on the right should correspond to your individual Desktops — they will be labelled ‘&lt;em&gt;Switch to Desktop 1&lt;/em&gt;’, ‘&lt;em&gt;Switch to Desktop 2&lt;/em&gt;’, etc;
&lt;img src=&quot;http://static.tonyarnold.com/keyboardshortcuts-1311313766.png&quot; alt=&quot;Keyboard Shortcuts system preferences with Mission Control selected&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Set a keyboard shortcut — &lt;em&gt;make sure that you enable the shortcut by clicking on the checkbox next to its name&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;Party like it’s Mac OS X Snow Leopard running Hyperspaces (&lt;em&gt;Partying not provided in package&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;assign-an-application-to-a-specific-desktop-or-all-desktops-using-the-dock&quot;&gt;Assign an application to a specific Desktop, or all Desktops using the Dock##&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Right-click on the icon of the application in the Dock you want to move to another Desktop;&lt;/li&gt;
  &lt;li&gt;Select ‘&lt;strong&gt;Options » Assign To » All Desktops&lt;/strong&gt;’ to show this application on all Desktops (this is useful for applications like the Finder, iChat and Twitter); OR
 Select ‘&lt;strong&gt;Options » Assign To » This Desktop&lt;/strong&gt;’ to make the application open new windows on the current Desktop, even if you’re working on another Desktop;
 &lt;img src=&quot;http://static.tonyarnold.com/dockassignments-1311313145.png&quot; alt=&quot;style: margin-top:5px;background-image:none;border-width:0px;background-color:transparent;-webkit-box-shadow:none;-mozilla-box-shadow:none;box-shadow:none;; alt: Dock Desktop assignments menu&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; These settings persist through quitting and re-opening an application, so if you ever decide you don’t like this setting follow the instructions as above but select ‘&lt;strong&gt;None&lt;/strong&gt;’ from the menu.&lt;/p&gt;

&lt;p&gt;Like &lt;a href=&quot;http://thecocoabots.com/blog/post/376/&quot;&gt;I’ve said before, I really like Mission Control&lt;/a&gt; — it’s got the right blend of features and simplicity for the way I work. I’ve had to modify my work patterns a little, but it feels frictionless next to the old Spaces to me (&lt;strong&gt;&lt;em&gt;hundreds of Hyperspaces users everywhere gasp!&lt;/em&gt;&lt;/strong&gt;). I’m sure as we all spend more time with Mission Control, more features will come to light – I’ll post them here as I find them.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>App Store Reviews as 'Political' Stands</title>
   <link href="https://tonyarnold.com/2011/05/30/app-store-reviews-as-political-stands.html"/>
   <updated>2011-05-30T00:00:00+10:00</updated>
   <id>https://tonyarnold.com/2011/05/30/app-store-reviews-as-political-stands</id>
   <content type="html">&lt;p&gt;I’ve just finished reviewing the day’s earnings, rankings and reviews courtesy of &lt;a href=&quot;http://appannie.com/&quot;&gt;App Annie&lt;/a&gt;, and I came across a gem of a review for &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt;. This is the first time I’ve seen an app review that is ‘politically’ motivated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;##Zero stars for the Mac App Store##&lt;/p&gt;

  &lt;p&gt;The end of the ‘world wide web’. The supposedly free internet with no boundaries. Political boundaries now apply. To justify enforced geographical extortion. Price-gouging based on location. By Apple, no less, leading the way. First with iTunes, and now this App Store. This app costs 12.99 in the US app store, but 25% more at 15.99 for those of us forced to use the ‘Australian’ app store, which is in fact the very same app store on the same server in the USA. Why? When the current exchange rate dictates the price should be even less than 12.99? Because they can rip us off an extra 25% on every app based on our history of paying more for products due to extra distance shipping etc. Because Apple and this developer are publicly declaring AUSTRALIANS ARE STUPID IGNORANT FOOLS EASILY PARTED WITH THEIR MONEY.And they’re right, because I am buying this app at the gouge-price - but not without a shout in anger. Because if I want this app, I now have no other option as it is not available directly from the developer or other third party site any more where once I could have bought it at the fair price via Paypal etc. I say it is enforced because I used to have a US Apple account for years, before it was even a US account, it was just an Apple account. Then they introduced the ‘US’ and ‘Australian’ versions and no more - they tell me I can only buy from my ‘geographical’ Australian store and nowhere else and have to pay extra for this bs nonsense. So as I see it, any developer who makes their apps only available via this App Store and hence making it my only option, is a knowing party to this price fixing and gouging, and I will accordingly score their app a measly 1 star every time. I can love their app, use their app, recommend their app, but the price gouging overrides everything else. 1 star for Hyperspaces. Zero stars for Apple’s Mac App Store (and iTunes).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I can’t say I disagree with the user’s review of Apple’s price gouging in the Australian market — I think they [Apple] need to come up with a model that better reflects the current economic state of play. I’ll cop the comments about not being able to purchase via my site — for posterity, &lt;a href=&quot;http://store.thecocoabots.com/&quot;&gt;Hyperspaces is still available for purchase directly from me&lt;/a&gt; it’s just not linked from anywhere but inside the demo (erk!).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What to do when all you have is symbLOLication</title>
   <link href="https://tonyarnold.com/2011/05/16/symblolication.html"/>
   <updated>2011-05-16T00:00:00+10:00</updated>
   <id>https://tonyarnold.com/2011/05/16/symblolication</id>
   <content type="html">&lt;p&gt;I’ve been battling a pesky case of missing symbols when debugging on iOS-based devices lately. It only started when I upgraded to Xcode 4. I was beginning to think I’d be symbolicating by hand until Apple sorted things out — fear not, I’ve found a workaround!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First up, profile your app using &lt;strong&gt;Instruments.app&lt;/strong&gt; — I use the ‘&lt;strong&gt;Time Profiler&lt;/strong&gt;’ instrument, because it’s pretty easy to see when things aren’t symbolicating properly. If you’re (un)lucky, your app will profile just fine, but you’ll be left with a bunch of addresses rather than nicely named methods and functions;&lt;/li&gt;
  &lt;li&gt;Stop profiling your app, but don’t close the Instruments document;&lt;/li&gt;
  &lt;li&gt;Go to ‘&lt;strong&gt;File » Re-Symbolicate Document…&lt;/strong&gt;’;&lt;/li&gt;
  &lt;li&gt;Find your app’s name in the list (search if you have to) and select it;&lt;/li&gt;
  &lt;li&gt;Click the ‘&lt;strong&gt;Locate&lt;/strong&gt;’ button, and find the dSYM for your app (as of Xcode 4, it’ll be in &lt;code&gt;~/Library/Developer/Xcode/DerivedData/$PRODUCT/Build/Products/Debug-iphoneos/&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Once you’ve done this, click OK and voila symbol names should spring to life!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any subsequent runs of your app in this Instruments document should properly symbolicate, allowing you to get back to making your app faster and smoother — enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Backup Setup</title>
   <link href="https://tonyarnold.com/2011/04/22/my-backup-setup.html"/>
   <updated>2011-04-22T22:27:00+10:00</updated>
   <id>https://tonyarnold.com/2011/04/22/my-backup-setup</id>
   <content type="html">&lt;p&gt;After the gushing “&lt;a href=&quot;/mac/work/2011/04/22/thankyou-backblaze.html&quot;&gt;Thankyou, Backblaze&lt;/a&gt;” post from earlier today, I thought it might be of some interest to others how I backup my Mac (like an elephant — hooo, I tied in a photo of my travels again!).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/elephant-1306151150.png&quot; alt=&quot;Elephants have long memory. Like a backup. And a boss.&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I consider backing up to be common sense these days. If you use your Mac for work or for play, you have information that you’d be upset were it to disappear. Not backing up is the computing equivalent of driving without a seatbelt: you might not have an accident today, but you’ll be thankful for it when you do.&lt;/p&gt;

&lt;p&gt;I have four levels of backups setup — that might sound a bit excessive, but I’ve found some services are better suited to looking after different types of information:&lt;/p&gt;

&lt;h3 id=&quot;dropbox&quot;&gt;&lt;a href=&quot;http://db.tt/hsOUhWJ&quot;&gt;Dropbox&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Dropbox is the centre of my backup strategy. My most important work-related documents all live in my Dropbox. I have a 50Gb account, of which I use about 5% for all of my client data, business records and any personal documents. I don’t store my Music, my Movies or any non-document content with Dropbox. With the advent of Xcode 4 and defaulting to storing intermediate build files in &lt;em&gt;~/Library/Developer/Xcode/Derived Data&lt;/em&gt;, I can safely leave these here without causing constant uploads. FYI, that’s a referral link to Dropbox’s website — if you end up signing up for a Dropbox account, I get 250Mb of free space in my account). You can use 2Gb of storage with Dropbox for free, which is &lt;em&gt;awesome&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;github&quot;&gt;&lt;a href=&quot;http://github.com/&quot;&gt;Github&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;If I’m working on a development project for you, or for myself, I have a private git repository setup for it on Github. This is an absolute no-brainer — the setup is simple, the user interface is simple and the support is great. For ~$7 (less if you’re transacting in AUD) every programmer should have this (or the equivalent for your DVCS of choice — I’ve also heard good things about &lt;a href=&quot;https://bitbucket.org/&quot;&gt;Atlassian’s BitBucket&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;time-machine&quot;&gt;Time Machine&lt;/h3&gt;

&lt;p&gt;1Tb external hard drives retail for about $90. Buy one, and setup Time Machine. Time Machine is far from perfect, but it’s something you don’t have to think about it — it just sits in the background and copies your changes to an external disk once an hour. It’s also a heck of a lot quicker to restore files to your Mac from a disk that’s directly attached than from any online service.&lt;/p&gt;

&lt;h3 id=&quot;backblaze&quot;&gt;&lt;a href=&quot;http://backblaze.com/&quot;&gt;Backblaze&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;AKA “The Best $5 I Spend Each Month”. Backblaze sits in the background just like Time Machine, but it pushes your information up to Backblaze’s data centre for long term storage rather than to local storage. It took a long time to perform the initial backup, but now that first run has finished I don’t notice it at all (and it’s &lt;a href=&quot;/mac/work/2011/04/22/thankyou-backblaze.html&quot;&gt;saved my bacon&lt;/a&gt;) after only a couple of months of use!). The brilliant feature that Backblaze offers is that they will send you a physical hard disk containing your data should you ever need it. They also don’t set limits on the amount of data you can store with them, so you don’t need to cherry-pick what you’ll backup — just let it do everything!&lt;/p&gt;

&lt;p&gt;If you want to keep reading about backups, there’s plenty of great info on other approaches at the &lt;a href=&quot;http://www.worldbackupday.net/&quot;&gt;World Backup Day site&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Thankyou, Backblaze</title>
   <link href="https://tonyarnold.com/2011/04/22/thankyou-backblaze.html"/>
   <updated>2011-04-22T22:02:00+10:00</updated>
   <id>https://tonyarnold.com/2011/04/22/thankyou-backblaze</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/incense-1306151252.png&quot; alt=&quot;Incense at Angkor Wat&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had one of those ‘cold shivers running down your spine’ moments this week, when a simple &lt;a href=&quot;http://dropbox.com/&quot;&gt;Dropbox&lt;/a&gt; problem wiped out an entire client Xcode project. I’m not entirely sure why it happened — I assume because of my constant rebooting between Snow Leopard and Lion (and subsequently ‘out-of-time’ file dates), but by the time I realised what was going on, neither &lt;a href=&quot;http://dropbox.com/&quot;&gt;Dropbox&lt;/a&gt; nor Time Machine had a copy of the files. Had I not set up three levels of backups, I might as well have been burning incense to the gods to get my data back (did you like that? I tied the pretty photo I took to the words on your screen!).&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;a href=&quot;http://backblaze.com/&quot;&gt;Backblaze&lt;/a&gt; was far more thorough than either of these services and 5 minutes after running through the online restore wizard I had a full copy of the project on my hard drive, and was knee deep in code again. Thankyou, &lt;a href=&quot;http://backblaze.com/&quot;&gt;Backblaze&lt;/a&gt; — you saved me stress and time, and the $5 (well, $4-something Australia) per month to backup my Mac is something I will not question again.&lt;/p&gt;

&lt;p&gt;If you rely on your Mac professionally, and you keep anything remotely important on there please take the time to verify the integrity of your back-ups.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sane permissions for Symphony CMS</title>
   <link href="https://tonyarnold.com/2011/01/26/sane-permissions-for-symphony-cms.html"/>
   <updated>2011-01-26T14:46:00+11:00</updated>
   <id>https://tonyarnold.com/2011/01/26/sane-permissions-for-symphony-cms</id>
   <content type="html">&lt;p&gt;I use &lt;a href=&quot;http://symphony-cms.com/&quot;&gt;Symphony CMS&lt;/a&gt; for almost all of my sites, and for my client sites as well. Here are a few tips I’ve found help to make your sites more secure, and ease development.&lt;/p&gt;

&lt;p&gt;There are a few simple things I change on my sites that you should probably think about:&lt;/p&gt;

&lt;h2 id=&quot;set-sane-permissions&quot;&gt;Set sane permissions&lt;/h2&gt;

&lt;p&gt;If you’re unfamiliar with how permissions work on UNIX, here’s an oversimplified breakdown:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt; — means that the file or directory (and it’s attributes) can be read. On a directory, this does not grant permission to read the contents of the directory (ie. the list of files inside the directory);&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write&lt;/strong&gt; — means that you can make changes to the file or directory;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt; — for directories, the execute permission allows the contents of the directory to be read (ie. list the files inside the directory). For files, this means that the file can be run as a executable process on your computer/server — this is almost &lt;strong&gt;never&lt;/strong&gt; what you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default &lt;a href=&quot;http://symphony-cms.com/&quot;&gt;Symphony&lt;/a&gt; install uses a permission mask of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;775&lt;/code&gt; for both directories and files created within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace&lt;/code&gt; directory. A permissions mask is composed of three discrete parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first number represents the &lt;strong&gt;owner of the file&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;The second number represents the &lt;strong&gt;group of the file&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;The third number represents &lt;strong&gt;everyone else&lt;/strong&gt; (‘other’).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So &lt;a href=&quot;http://symphony-cms.com/&quot;&gt;Symphony’s&lt;/a&gt; default permissions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;775&lt;/code&gt; for both directories and files means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Owner&lt;/strong&gt; — can read, write and execute both directories and files created by Symphony;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Group&lt;/strong&gt; — can read, write and execute both directories and files created by Symphony;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Everyone&lt;/strong&gt; — can read and execute both directories and files created by Symphony;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on your web host, this default might actually stop your site from working entirely — at the least it’s a pretty insecure mask to use out of the box. The absolute bottom line is that &lt;strong&gt;on a public web site, you should never grant any permissions unless they are absolutely necessary&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The directory permissions are (in most cases) completely OK. But the file permissions are not OK at all — you do not under nearly any circumstances want files within your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace&lt;/code&gt; to be executable — not even by you. Leaving files executable within this directory leaves you open to somebody gaining access to your install and uploading a script or binary executable - if you remove the executable bit from all uploaded files, there’s little chance someone can use uploaded files to do anything malicious to your site.&lt;/p&gt;

&lt;h3 id=&quot;bottom-line&quot;&gt;Bottom line&lt;/h3&gt;

&lt;p&gt;I always set my file permissions to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;664&lt;/code&gt;, and my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;775&lt;/code&gt; for directories when setting up a new &lt;a href=&quot;http://symphony-cms.com/&quot;&gt;Symphony&lt;/a&gt; install.&lt;/p&gt;

&lt;p&gt;If you know that your site will be run as a discrete user on your server, you could even consider removing write privileges for group as well - this is as simple as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;755&lt;/code&gt; for groups, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;644&lt;/code&gt; for users. This might interfere with local development (depending on how your local install is setup), so I generally don’t change this.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>"Redefinition" with waffles</title>
   <link href="https://tonyarnold.com/2010/11/19/redefinition-with-waffles.html"/>
   <updated>2010-11-19T09:44:00+11:00</updated>
   <id>https://tonyarnold.com/2010/11/19/redefinition-with-waffles</id>
   <content type="html">&lt;p&gt;I’ve always been an Apple user, and I love working with their technology - but I’ve noticed a worrying trend amongst some (very smart, very respected) Cocoa developers of late to excuse Apple’s every move, even when some of the moves are clearly a step backward. There have been some &lt;a href=&quot;http://rentzsch.tumblr.com/post/592949476/c4-release&quot;&gt;notable exceptions&lt;/a&gt; (which I applaud).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Steve Jobs compares the currently sprouting wave of “post-PC devices” to cars, and PCs such as they exist today to trucks. For most things most people do, you don’t need a truck, and it’s a lot of dead weight to haul around with you. I can see his point to a certain extent, but right now, the argument doesn’t hold.&lt;br /&gt;
…&lt;br /&gt;
Some people will say “real people don’t care about the file system”. Well, okay, sure. Real people still group materials together from multiple applications into one folder for whatever project it is they’re working on. Real people still aren’t satisfied with a row of chronologically ordered, scrollable thumbnails where the only recourse for secrecy is removal, and the only recourse for reordering is frail and time-consuming and involves re-saving everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was taken from &lt;a href=&quot;http://waffle.wootest.net/2010/11/18/redefinition/&quot;&gt;waffle software’s “Redefinition” post&lt;/a&gt;, and I have to say this is one of the most succinct, straight-to-the-point pieces of writing I’ve read about the dumbing down of consumer’s perceived expectations versus their actual wants of technology. I’ll let Jesper speak for himself rather than reproducing the article here, but &lt;strong&gt;I heartily concur&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Life and the art of relaxating</title>
   <link href="https://tonyarnold.com/2010/10/06/life-and-the-art-of-relaxating.html"/>
   <updated>2010-10-06T15:20:00+11:00</updated>
   <id>https://tonyarnold.com/2010/10/06/life-and-the-art-of-relaxating</id>
   <content type="html">&lt;p&gt;So when last we spoke, I was making noises about private methods in Objective-C - I’ll get back to the regularly scheduled nerdery and instructional coding shortly, but I wanted to post a little bit about things that have happened over the last few months.&lt;/p&gt;

&lt;h2 id=&quot;health&quot;&gt;Health&lt;/h2&gt;

&lt;p&gt;For the better part of this year, I’ve been dealing with some completely non-double-rainbow health problems (oh, I went there). It’s not over yet, but I’m on the mend and hopefully this is the end of it for a while. This has taken a large toll on my ability to work on my own apps, while continuing to pay the bills by working on other people’s apps - this is why Hyperspaces 1.1 isn’t out yet. I’m on Doctor’s orders to take it slowly for a while - I spent this morning sitting in the sun for the first time in what seems like years. Why didn’t I make more time for this before? Sunshine most definitely &lt;strong&gt;is&lt;/strong&gt; double rainbow!&lt;/p&gt;

&lt;p&gt;It’s necessary for me to thank my little family now, with the most awesome photo of Leah and Scout ever:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/my_girls-1306151393.jpg&quot; alt=&quot;Leah and Scout playing&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-new-car&quot;&gt;The New Car&lt;/h2&gt;

&lt;p&gt;Excitingly, I recently came into possession of a fairly recent model Mazda 6 which I love to bits. Not because it’s a nice car to drive (it is), or because I think it’s a handsome devil (yes, again) but because for the last 13 years I have struggled with the inability to put anything of real size into my car. The Lancer has been a noble steed, but it was well past time for me to upgrade to a so-called “grown up” car:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/mazda-1306151413.jpg&quot; alt=&quot;The 'Grown Up Car' being all shiny&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was dutifully christened with a trip to &lt;a href=&quot;http://goo.gl/maps/OI1Y&quot;&gt;Ikea&lt;/a&gt; where Leah and I struggled to fill even the remotest part of the space in the back. Despite the loss of sanity from actually entering Ikea on a weekend, I grinned for most of the trip home, and have washed the new car far too much since we bought it.&lt;/p&gt;

&lt;h2 id=&quot;web-directions&quot;&gt;Web Directions&lt;/h2&gt;

&lt;p&gt;Next week, &lt;a href=&quot;http://south10.webdirections.org/&quot;&gt;Web Directions South 2010&lt;/a&gt; is on and I’m going to be there as a free agent for the first time. I’ve armed myself with the essential dump’n’burn personal marketing tool - some very stylish new business cards put together by none other than my own &lt;a href=&quot;http://topsie.tumblr.com/&quot;&gt;Leah&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/businesscards-1306151379.jpg&quot; alt=&quot;New CocoaBots business cards&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m super excited to see what Maxine and John have in store for us this year - the calibre of last year’s sessions was impressive, and I met some fantastic people. If you’re going to be there and want to say ‘Hi!’ or have a drink, message me on &lt;a href=&quot;http://twitter.com/tonyarnold&quot;&gt;the Twitters&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Private methods in Objective-C using categories</title>
   <link href="https://tonyarnold.com/2010/05/04/private-methods-in-objective-c-using-categories.html"/>
   <updated>2010-05-04T01:15:00+10:00</updated>
   <id>https://tonyarnold.com/2010/05/04/private-methods-in-objective-c-using-categories</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/danger_of_pulling_down_with_cage-1306152934.jpg&quot; alt=&quot;Photo of a badly translated warning sign in Croatia&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Objective-C is an incredibly flexible language, but there are a few things I don’t think it handles very elegantly - private methods are one of those things. Private methods are important when designing your classes - keeping the implementation of your methods separate to the interface that users of your class see is good practice, and lets you change the way you implement things in future without making users of your class change their code.&lt;/p&gt;

&lt;p&gt;Objective-C has a great feature known as categories. In the &lt;a href=&quot;http://cocoadevcentral.com/d/learn_objectivec/&quot;&gt;words of Scott Stevenson&lt;/a&gt;, “a category allows you to add methods to an existing class without subclassing it or needing to know any of the details of how it’s implemented”. My private methods are implemented using an anonymous category on each class. These are also known as “Class Extensions” and they look like this in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.m&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyGreatClass&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Your standard, public methods for the class go here.&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark - Private Methods
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyGreatClass_somePrivateMethod&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Implement your private method here.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that I preface my private methods with the name of the current class - I do this to avoid method name collisions with subclasses. It’s not strictly necessary, but it means I don’t have to think as hard when implementing subclasses of my class.&lt;/p&gt;

&lt;p&gt;You can do everything you would in a normal class &lt;strong&gt;except&lt;/strong&gt; declare new instance variables. I often use my class extensions to redeclare a public &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readonly&lt;/code&gt; property as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readwrite&lt;/code&gt; within the confines of the class instance. Another common use in my code are the following two methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyGreatClass_registerObservers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyGreatClass_unregisterObservers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These methods are used to set up and tear down any Key/Value Observers and bindings for the current class. I use these so often that &lt;a href=&quot;http://github.com/tonyarnold/CocoaBotsXcodeTemplates/&quot;&gt;I’ve put together an Xcode class template&lt;/a&gt; so that they are included in my classes by default.&lt;/p&gt;

&lt;p&gt;Please &lt;strong&gt;keep in mind that Objective-C has no true implementation of private methods&lt;/strong&gt; - other classes can use these “private” methods if they know the structure of the method in question. With that said, I still believe this is a great way to keep your implementation as clean as possible.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;Both Paul and Collin make good points in the comments - you can just declare your private methods inline in your class without using an anonymous category. That will work so long as the declaration occurs before the first use of the method. In my mind, there are two good reasons to use a category:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Readability/cleanliness&lt;/strong&gt; - I find it a lot easier to group the declarations for my private methods together inside the category block. It’s quite readable and means I can just look at the start of the source for each of my classes to see what private methods are defined;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s the same when compiled&lt;/strong&gt; - as I understand it, anonymous categories are compiled into the same space as the methods for the class they are defined for. Functionally - once the code is compiled - there shouldn’t be any difference between the two ways of defining the methods.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>WWDC 2010: the death of the Mac (or not)</title>
   <link href="https://tonyarnold.com/2010/05/03/wwdc-2010-the-death-of-the-mac-or-not.html"/>
   <updated>2010-05-03T02:11:00+10:00</updated>
   <id>https://tonyarnold.com/2010/05/03/wwdc-2010-the-death-of-the-mac-or-not</id>
   <content type="html">&lt;p&gt;It appears that &lt;a href=&quot;http://developer.apple.com/wwdc/&quot;&gt;Apple’s World Wide Developer’s Conference&lt;/a&gt; (WWDC) is about &lt;a href=&quot;http://www.apple.com/iphone/preview-iphone-os/&quot;&gt;iPhoneOS 4.0&lt;/a&gt; this year. The focus of the advertising, the sessions and the announcements all appear to be firmly focused on iPhone and iPad development, and there’s scarce mention of the Mac in amongst the copy. This in and of itself is fine - the focus of the last 2 years (2008-2009) was pretty clearly on Mac OS X “Snow Leopard”, so given the impending release of a major operating system release for the iPhone (and eventually iPad) I can understand why they’d be focusing on their new baby.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/wwdc_moscone_2008-1306152894.jpg&quot; alt=&quot;Photo of Moscone West at WWDC in 2008&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But it’s raised a bit of an irate response from the more Mac-focused developers - “&lt;a href=&quot;http://en.wikipedia.org/wiki/What_About_Me_(song)&quot;&gt;What about me?&lt;/a&gt;”. At first, I was incensed too - why would I want to pay close to $6000 AUD for tickets, flights, accommodation and food to go to a conference that’s taken the focus off my primary development platform? I get it, though - it makes sense. And yeah, I’d get some benefit from the iPhone OS sessions. However, I’m pretty certain that I wouldn’t get $6000 worth of benefit this year, so I’m putting my hard earned money to one side for this year in the hopes that WWDC 2011 is a better fit for my needs. As are a number of other high profile Mac developers (who I was really looking forward to catching up with, you bastards!). But that’s OK - there are more iPhoneOS developers than there are Mac developers these days anyway so WWDC will still sell out and the planet will continue to turn.&lt;/p&gt;

&lt;p&gt;The only part I don’t understand is taking the Apple Design Awards away from Mac developers, but then the iPhone OS-based ADAs this year are a locked down shadow of what the ADAs used to be, so I don’t think I’ll waste too many words on this except to say that outwardly it’s a pretty shitty move from Apple. My oft-unused rational brain says that 5 weeks for ADA submissions and selection for both platforms seems a little tight, but all of the WWDC material feels rushed and unfinished this year. It’s as good an excuse in my brain as any.&lt;/p&gt;

&lt;p&gt;My opinion is that next year’s WWDC will have a greater focus on whatever future version of Mac OS X Apple are working on - let’s call it “Mac OS X 10.7” for the rest of this post, understanding that it might be called “Cecil”, or something far less interesting when it actually comes out. The design awards will have a Mac category again, and we’ll all get excited about what’s coming next.&lt;/p&gt;

&lt;h2 id=&quot;you-know-what-really-grinds-my-gears&quot;&gt;You know what really grinds my gears?&lt;/h2&gt;

&lt;p&gt;So here’s the bit that’s annoying me: there is a vocal contingent of Cocoa developers who are saying loud and proud that the iPhone and iPad are the future of computing, and that developers should be shifting their business and efforts to these platforms (and subsequently away from the Mac). Just sit back and think about this for a minute - &lt;strong&gt;if you were forced to use just your iPhone or iPad to do everything you do now, could you do it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’m not Joe Average, but I certainly couldn’t.&lt;/p&gt;

&lt;p&gt;There are plenty of things I can (and do) get away with on my iPhone 3GS - basic emailing, basic browsing, simple task management, etc. You’ll pry the damned thing from my cold, dead hands. But &lt;strong&gt;I can’t get real, honest-to-god work done on my iPhone without serious impact to my time and productivity&lt;/strong&gt; (I also can’t use Xcode, so that’s going to stop me right there - but let’s ignore that for now).&lt;/p&gt;

&lt;h2 id=&quot;its-about-style-baby&quot;&gt;It’s about style, baby&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Before I begin:&lt;/strong&gt; I’m purposely leaving games out of this argument - this is about replacing my desktop computer, and I don’t use my desktop computer for games.&lt;/p&gt;

&lt;p&gt;The style of applications on the iPhone and iPad are usually simpler, cut-down versions of their desktop cousins - there’s only a few apps I can think of that have feature parity with their desktop counterparts. &lt;a href=&quot;http://www.atebits.com/tweetie-iphone/&quot;&gt;Tweetie&lt;/a&gt; and &lt;a href=&quot;http://twitterrific.com/&quot;&gt;Twitteriffic&lt;/a&gt; are examples that come to mind (although arguably their desktop versions have been left to die for the past year). I’ve not used the iPad-based iWork suite yet - &lt;em&gt;which I’d pinned high hopes on&lt;/em&gt; - but the reviews are pretty clear that these are not complete replacements for iWork on the desktop. I also don’t see a full replacement for iPhoto, GarageBand or any of Apple’s consumer apps. In fact, there’s very little in the way of rich content creation.&lt;/p&gt;

&lt;p&gt;I expect that the larger screen and differing user interface on the iPad will go some of the way toward addressing this issue in time, but &lt;strong&gt;the iPhone is unlikely to offer as rich or productive an experience as a well developed, fully-featured desktop application&lt;/strong&gt;. Prettier? Yeah, sure - maybe. More fun? Perhaps - there are some great iPhone apps out there. But genuine, get work done all day long every day apps? Not yet. Not by a long shot.&lt;/p&gt;

&lt;h2 id=&quot;innovation-where&quot;&gt;Innovation? Where?&lt;/h2&gt;

&lt;p&gt;One of the key arguments being used is that there appears to be a lack of innovation on the desktop lately. I’d argue there’s little real innovation occurring on either side of the fence.&lt;/p&gt;

&lt;p&gt;That’s not saying that there aren’t some really cool apps being developed. Wrappers around oft-used sites that are infinitely more usable than the original site. Quick methods of letting your friends know how banal your existence is by using your location. Nifty ways to tune my guitar.&lt;/p&gt;

&lt;p&gt;There have been some real interaction improvements based upon the touch-based user interface  - “&lt;em&gt;pull down to refresh&lt;/em&gt;” in &lt;a href=&quot;http://www.atebits.com/tweetie-iphone/&quot;&gt;Tweetie&lt;/a&gt; is one of them. But take the whole “I can use my fingers” thing off the table (and I’m genuinely interested in an answer to this question) - what exactly are these wonderful innovations being bandied about on the touch platforms? Touch itself? That’s been around for years in similar (albeit poorly implemented) forms. I do want to know, because I’m still seeing user interface conventions like tableviews and drawers from 2005, gussied up with some iPhone make-up.&lt;/p&gt;

&lt;h2 id=&quot;youre-just-a-hater-silly-old-time-developer&quot;&gt;You’re just a hater, silly old-time developer!&lt;/h2&gt;

&lt;p&gt;I assure you: &lt;strong&gt;I most definitely am not&lt;/strong&gt; (a hater, or old - although I do have a few grey hairs in my beard that weren’t there last year). I love my iPhone. I’ll buy an iPad when they’re available here in Australia. I am, do and will continue to develop apps for the iPhone OS - it’s a marvellous, groundbreaking piece of technology.&lt;/p&gt;

&lt;p&gt;I also agree with the &lt;strong&gt;basic&lt;/strong&gt; sentiment being expressed - input other than physical keyboards and mice will eventually take over for standard interaction with our computers. I also think the iPad is a glimpse at something wonderful. But &lt;strong&gt;it’s a glimpse, not the whole picture&lt;/strong&gt;. I’m also not surprised by the noise coming from the iPhone OS camp - it’s new, it’s shiny and there are (some) people making an absolutely killing off the sales of their apps. Some of those apps are actually genuine leaps forward in terms of using the new interaction models that Apple’s designed for the iPhone.&lt;/p&gt;

&lt;p&gt;But in my opinion, it’s not the end of the desktop or the Mac.&lt;/p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin?&lt;/h2&gt;

&lt;p&gt;I believe the Mac has a heck of a lot of life left in it. Will the fun end some day? Sure. Will it be brought about by iPhone OS - no, I genuinely believe it won’t. When there’s something better to replace everything we use our Macs for now, I’m sure Apple will retire the mantle. Until then, we’ll have divergent technologies with differing purposes.&lt;/p&gt;

&lt;p&gt;Yep, I’m biased - I love developing for the Mac, so I’ll still be at it even when I have award winning, billion-dollar-a-year apps in the app store (heh).&lt;/p&gt;

&lt;p&gt;Am I done? Not quite. “One last thing” as the saying goes:&lt;/p&gt;

&lt;p&gt;My message to the “Mac is dead” crowd - have the foresight to preface your statements with “in my opinion”. It’s less inflammatory than stating your opinion as if it were fact, and you won’t feel quite so bad when it doesn’t happen. &lt;strong&gt;Wait, that wouldn’t draw attention to your iPhone apps, would it?&lt;/strong&gt; #waitiseewhatyoudidthere&lt;/p&gt;

&lt;p&gt;Now, &lt;a href=&quot;http://thecocoabots.com/&quot;&gt;go look at my Mac apps&lt;/a&gt;. Fin.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Making your iPhone app's maps work like Apple's</title>
   <link href="https://tonyarnold.com/2010/04/21/making-your-iphone-apps-maps-work-like-apples.html"/>
   <updated>2010-04-21T17:35:00+10:00</updated>
   <id>https://tonyarnold.com/2010/04/21/making-your-iphone-apps-maps-work-like-apples</id>
   <content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; These instructions have been tested under iPhone SDK 3.1 - they will probably work under future releases of the iPhone OS, but I don’t make any guarantees. &lt;strong&gt;Don’t ever blindly include code in your apps&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve had the opportunity to work on a couple of smaller iPhone apps that include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKMapView&lt;/code&gt; components to show the location of stores and other items of interest. One of the things I found a little challenging was that the map views didn’t work quite the same way as those found within Apple’s Maps.app on the iPhone. I mean, sure - you can pan around the map with your fingers and zoom in and out by pinching, so the basics are there - but once you start tracking the user’s current location (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showsUserLocation&lt;/code&gt;) all the nice stuff just falls away.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/ttm_example-1306152825.png&quot; alt=&quot;Screenshot of TapThatMap sample app&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try it now - pop open the Maps app on your iPhone and tap the little crosshair button in the lower left corner of the map to show your current location. Straight away you’ll notice that the map zooms and scrolls to centre on your current location. Now try moving the map around - the map location follows your fingers, with that pretty blue pulsing dot tailing your every move. Nice, huh? OK, now scroll the map somewhere else using your fingers. What happened? The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showsUserLocation&lt;/code&gt; property just set itself to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO&lt;/code&gt; and the map stopped following you. Right thing to do, hey? Guess what - that’s not standard behaviour if you just drop an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKMapView&lt;/code&gt; into your app. The good news is that it’s not hard to copy this behaviour, and you don’t have to use private APIs either (nice!).&lt;/p&gt;

&lt;p&gt;Here’s how an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKMapView&lt;/code&gt; is structured at the highest levels (in a very loose sense):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- MKMapView
  - UIView
    - UIScrollView
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s what makes it nice and easy to replicate this behaviour - the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; has a property named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contentOffset&lt;/code&gt; that we can watch for changes using Key/Value Observation. When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contentOffset&lt;/code&gt; property changes, we can quickly check if the user is making the changes (in which case we want to turn off our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showsUserLocation&lt;/code&gt; property), or if something else like the application is making the changes in which case we just want to ignore the change (ie. when zooming to a specific pin due to a search).&lt;/p&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample Code&lt;/h2&gt;

&lt;p&gt;I’ve uploaded a sample project to Github containing a very simple implementation of this approach - you’re welcome to clone it, fork it or just read through it:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;http://github.com/tonyarnold/sample-iphonesdk-tapthatmap&quot;&gt;&lt;img src=&quot;http://static.tonyarnold.com/xcode_project_icon-1306152857.png&quot; alt=&quot;Xcode Project Icon&quot; title=&quot;Xcode Project Icon (128px by 128px)&quot; /&gt;TapThatMap Sample for iPhone SDK&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully this will help someone else looking to achieve the same effect. Currently, tapping the “&lt;strong&gt;Start Following Me&lt;/strong&gt;” button does not zoom to and centre on the user’s location like Apple’s Maps.app, but otherwise the functionality provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MapKit.framework&lt;/code&gt; should be enough. I’ll add more to the sample project as I get time.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Campaign Monitor from within your Cocoa app</title>
   <link href="https://tonyarnold.com/2010/01/13/campaign-monitor-from-within-your-cocoa-app.html"/>
   <updated>2010-01-13T16:09:00+11:00</updated>
   <id>https://tonyarnold.com/2010/01/13/campaign-monitor-from-within-your-cocoa-app</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This is the first of my ‘Giving back’ posts. The idea is that I’ll give something back to this wonderful Cocoa coding community at least once every couple of weeks. I mean, what’s the point of going indie if I can’t do what I want once in a while? :)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/join_our_mailing_list-1306152759.png&quot; alt=&quot;Screenshot of dialog asking to join a mailing list from CBMailingListSignup&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of all the marketing avenues I continue to investigate and read about, mailing lists seem to be something that the rest of you recommend time and again. I missed a few boats when I launched &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; - were I to do the launch over again, I’d make sure that a mailing list was in place and easy to join from my website and within my app. I’ve always admired the way the &lt;a href=&quot;http://panic.com/&quot;&gt;Panic&lt;/a&gt; apps ask you to join their mailing list the first time you start them - it’s simple and unobtrusive.&lt;/p&gt;

&lt;p&gt;As part of my work toward future versions of &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt;, I’m looking to do the same. I’m still deciding which mailing list package/provider I will use in the end, so please don’t take this as a “this is what The CocoaBots use” post, however I did meet the &lt;a href=&quot;http://campaignmonitor.com/&quot;&gt;Campaign Monitor&lt;/a&gt; guys at &lt;a href=&quot;http://wds09.webdirections.org/&quot;&gt;Web Directions South 09&lt;/a&gt;, and their product has a nice web service API. So I put together a small example project that will sign a user up to your Campaign Monitor mailing list from directly within your app.&lt;/p&gt;

&lt;p&gt;The code is heavily inspired by Uli’s &lt;a href=&quot;http://zathras.de/angelweb/sourcecode.htm&quot;&gt;UKCrashReporter&lt;/a&gt; and Wolf’s &lt;a href=&quot;http://github.com/rentzsch/jrfeedbackprovider/&quot;&gt;JRFeedbackProvider&lt;/a&gt; projects (this is like a mutant offspring of the two). I may not end up using it in my apps, but hopefully someone else finds it useful.&lt;/p&gt;

&lt;p&gt;The GitHub project is at &lt;a href=&quot;http://github.com/tonyarnold/CBMailingListSignup/&quot;&gt;http://github.com/tonyarnold/CBMailingListSignup&lt;/a&gt;, and the code is licensed under the &lt;a href=&quot;http://creativecommons.org/licenses/by/2.5/au/&quot;&gt;Creative Commons Attribution 2.5 Australia License&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hyperspaces 1.0 and The CocoaBots</title>
   <link href="https://tonyarnold.com/2009/12/15/hyperspaces-1-and-thecocoabots.html"/>
   <updated>2009-12-15T12:42:00+11:00</updated>
   <id>https://tonyarnold.com/2009/12/15/hyperspaces-1-and-thecocoabots</id>
   <content type="html">&lt;p&gt;There’s more about this over at the &lt;a href=&quot;http://thecocoabots.com/blog/&quot;&gt;new CocoaBots blog&lt;/a&gt;, but I just launched &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces 1.0&lt;/a&gt;. Further to that, &lt;a href=&quot;http://thecocoabots.com/blog/&quot;&gt;The CocoaBots&lt;/a&gt; is now a full-time venture - check out the new site for more info!&lt;/p&gt;

&lt;p&gt;I’ll put together a post about going indie soon (I promise!) but for now all I can say is that I love it!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Core Animation uses a lot of memory</title>
   <link href="https://tonyarnold.com/2009/08/23/core-animation-uses-a-lot-of-memory.html"/>
   <updated>2009-08-23T22:22:00+10:00</updated>
   <id>https://tonyarnold.com/2009/08/23/core-animation-uses-a-lot-of-memory</id>
   <content type="html">&lt;p&gt;Here’s something Apple should probably put on the box when they sell Core Animation to new developers: It uses a &lt;em&gt;lot&lt;/em&gt; of RAM. Before you dive in with both feet, you need to ask whether the features you get from Core Animation will really be worth the overhead.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt;, if you’re running on a single monitor set-up, you’ll generally see RAM usage around the 60-100Mb mark (RSIZE). Two screens, you’re going straight beyond the 100Mb mark. I assume it grows exponentially from there, but I’ve no machines on hand that will drive more than 2 screens (&lt;em&gt;Update:&lt;/em&gt; I assume wrong - the caching is pretty good for CGImageRefs and their ilk. It won’t grow exponentially).&lt;/p&gt;

&lt;p&gt;On a single monitor set-up, there are two layer-backed views - one screen-size view that sits behind your desktop icons, and one smaller view that contains the switcher. If I run up Hyperspaces without either of my layer-backed views enabled, the application uses 13Mb RAM - so the core (for what it does) is quite compact. If I re-enable the layer-backed switcher window, memory usage instantly jumps to 56Mb - the switcher is usually about 500 - 600px wide, and about 100px high (with 3 spaces enabled).&lt;/p&gt;

&lt;p&gt;I have spent &lt;em&gt;months&lt;/em&gt; trying to bring this number down by any means possible. So far, I’ve tried:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cropping and chopping my &lt;a href=&quot;http://developer.apple.com/documentation/graphicsimaging/reference/CGImage/Reference/reference.html&quot;&gt;CGImageRef&lt;/a&gt; objects down to only exactly what’s needed for display;&lt;/li&gt;
  &lt;li&gt;Aggressively caching and uncaching &lt;a href=&quot;http://developer.apple.com/documentation/graphicsimaging/reference/CGImage/Reference/reference.html&quot;&gt;CGImageRef&lt;/a&gt; objects (thanks go out to &lt;a href=&quot;http://seanpatrickobrien.com/&quot;&gt;Sean O’Brien&lt;/a&gt; for helping me with that);&lt;/li&gt;
  &lt;li&gt;Storing only the &lt;a href=&quot;http://developer.apple.com/documentation/graphicsimaging/Reference/CGImageSource/index.html&quot;&gt;CGImageSourceRef&lt;/a&gt; for each of my images and explicitly telling those sources not to cache their &lt;a href=&quot;http://developer.apple.com/documentation/graphicsimaging/reference/CGImage/Reference/reference.html&quot;&gt;CGImageRefs&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Saving those cropped and chopped &lt;a href=&quot;http://developer.apple.com/documentation/graphicsimaging/reference/CGImage/Reference/reference.html&quot;&gt;CGImageRef&lt;/a&gt; objects out to cached JPEG2000 files and then reading those files back into cached &lt;a href=&quot;http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/index.html&quot;&gt;NSData&lt;/a&gt; objects to be decoded when needed;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are probably other things I’ve tried that have worked to varying degrees, but those items above are the ones that made a difference. They don’t solve the problem.&lt;/p&gt;

&lt;p&gt;If you’re writing a background application that you expect your users to have open all the time, you (unfortunately) will need to think very carefully about whether you should use Core Animation in your application. I’ve had feedback from users of &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; that they would prefer to leave the animation in - while I pitch &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; as a tool that provides context to Apple’s Spaces, I’m pretty sure a lot of the users are more into the eye candy and the softly fading desktop images :)&lt;/p&gt;

&lt;p&gt;I’ve certainly asked for advice about this issue in a few different places, as well as done my research - and I’d be very happy to be proven wrong (please?!).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Get Satisfaction for user support - does it work?</title>
   <link href="https://tonyarnold.com/2009/07/16/get-satisfaction-for-user-support.html"/>
   <updated>2009-07-16T22:17:00+10:00</updated>
   <id>https://tonyarnold.com/2009/07/16/get-satisfaction-for-user-support</id>
   <content type="html">&lt;p&gt;For the past few months, I’ve been using the free version of &lt;a href=&quot;http://getsatisfaction.com/&quot;&gt;Get Satisfaction&lt;/a&gt; to manage end-user support for &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt;, and I thought it was time to write a bit of a retrospective. I want to start by saying that I don’t think there is a perfect answer to user support - people are funny creatures, and they tend to want help on their own terms. This usually means that a tool like &lt;a href=&quot;http://redmine.org/&quot;&gt;Redmine&lt;/a&gt; (which I absolutely &lt;strong&gt;love&lt;/strong&gt; for my development and product testing) is going to annoy the hell out of your Mum &amp;amp; Pop software users (what’s a ‘milestone’, and why do I care?).&lt;/p&gt;

&lt;p&gt;I’ve been through a few different products over the years, including &lt;a href=&quot;http://sourceforge.net/&quot;&gt;Sourceforge&lt;/a&gt;, &lt;a href=&quot;http://trac.edgewall.com/&quot;&gt;Trac&lt;/a&gt; and &lt;a href=&quot;http://redmine.org/&quot;&gt;Redmine&lt;/a&gt; - all of which were and are brilliant, but far too focused on development. Finally, around 12 months ago, I started looking elsewhere for my user support - “Surely there’s something better!” I told myself. Thankfully, there was: &lt;a href=&quot;http://getsatisfaction.com/&quot;&gt;Get Satisfaction&lt;/a&gt;. From &lt;a href=&quot;http://en.wikipedia.org/wiki/Get_Satisfaction&quot;&gt;Wikipedia’s description of Get Satisfaction&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The company describes its product as “people-powered customer service”. On the website, anyone can ask a question, submit an idea or complaint, or give praise; all posts can be read by anyone. Companies can respond to issues regarding their products or services; official responses are marked as official answers to separate them from other responses. Users can rate responses based on how well they resolve the issue.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started seriously looking at &lt;a href=&quot;http://getsatisfaction.com/&quot;&gt;Get Satisfaction&lt;/a&gt; around May last year, and at the time I was very impressed. When I publicly launched &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; earlier this year, there was a &lt;a href=&quot;http://getsatisfaction.com/thecocoabots/products/thecocoabots_hyperspaces&quot;&gt;Get Satisfaction page for it on launch day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And for a time, it was great - I’m a big believer in being hands on and communicative. If there’s a problem with my product, I take care to publicly acknowledge that I’ve got the message even if I have no idea how to fix it yet. I did that - I answered, and answered and answered. I think my users appreciated it. w00t!&lt;/p&gt;

&lt;p&gt;Then the clouds started to form.&lt;/p&gt;

&lt;p&gt;With more questions being posted, the page started getting really messy, and I honestly believe quite hard to use. The interface now seemed cluttered and obstructive rather than helpful, and I was getting lots of duplicate questions - “this isn’t working how it’s supposed to”. I’m a developer, not a user of my product, so I don’t pretend that I always know what mine are thinking, but surely this wasn’t an easy way to get an answer to your question?&lt;/p&gt;

&lt;p&gt;I am at the point now where I am seriously reviewing other options for user support. The problem is, I’m yet to find something that’s as simple - and more importantly, free - as &lt;a href=&quot;http://getsatisfaction.com/&quot;&gt;Get Satisfaction&lt;/a&gt;. &lt;a href=&quot;http://tenderapp.com/&quot;&gt;entp’s Tender&lt;/a&gt; looks really, really nice - but it’s expensive for me.&lt;/p&gt;

&lt;p&gt;To complicate matters further, &lt;a href=&quot;http://getsatisfaction.com/&quot;&gt;Get Satisfaction&lt;/a&gt; has just released version 2.0 of their site. The company overview is now a fantastic layout - nice, simple and straight-forward. It’s categorised and visually sorted. The product pages aren’t so lucky - they’re still a formless mess, and I have a hard time understanding why there’s not &lt;strong&gt;some&lt;/strong&gt; structure to them.&lt;/p&gt;

&lt;h2 id=&quot;company-overview&quot;&gt;Company Overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2423/3725821905_ba0967d880_o.jpg&quot; alt=&quot;GetSatisfaction: CocoaBots Support Page&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;product-support&quot;&gt;Product Support&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/3458/3725821619_a195a75060_o.jpg&quot; alt=&quot;GetSatisfaction: Hyperspaces Support Page&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll keep this post updated with what I decide to do, but right now I’m seriously weighing up whether it’s worth pouring some of the money I’ve made from &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; into a really good support package from somewhere like &lt;a href=&quot;http://entp.com/&quot;&gt;entp&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Testing testers</title>
   <link href="https://tonyarnold.com/2009/07/02/testing-testers.html"/>
   <updated>2009-07-02T21:01:00+10:00</updated>
   <id>https://tonyarnold.com/2009/07/02/testing-testers</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/bottlejacks-1306152609.jpg&quot; alt=&quot;Bottlejacks lifting Elizabeth Street house&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the challenges most independent developers will face is finding good testers for their applications. I’ve been relatively lucky with &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; - my users tend to take the time to tell me what’s going on when they submit a crash report, or start a new conversation on &lt;a href=&quot;http://getsatisfaction.com/thecocoabots/&quot;&gt;GetSatisfaction&lt;/a&gt;. What I have had troubles with is finding enough people willing to help test upcoming releases - right now, I have &lt;a href=&quot;http://getsatisfaction.com/thecocoabots/topics/test_build_of_hyperspaces_1_0_beta_8_is_available&quot;&gt;a great new release of Hyperspaces&lt;/a&gt; ready for a few keen souls to try out, but nobody has downloaded it! If you’re a user - please - give it a go, let me know what you find. If you’re a developer, read on…&lt;/p&gt;

&lt;p&gt;So what do other independent developers do in this situation? My tests (unit and functional) tell me that the release is OK, but after some earlier mishaps I’m much more cautious about just throwing out a new update via &lt;a href=&quot;http://sparkle.andymatuschak.org/&quot;&gt;Sparkle&lt;/a&gt;. I don’t have the money to spend on hordes of formal testers, and I’m pretty sure people do actually use and love my app - is it right to harness that goodwill for my testing purposes? Or should I just be saving up to pay some testers? What’s a reasonable amount? Questions, questions, questions…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CATiledLayers are fun</title>
   <link href="https://tonyarnold.com/2009/04/04/catiledlayers-are-fun.html"/>
   <updated>2009-04-04T01:03:00+11:00</updated>
   <id>https://tonyarnold.com/2009/04/04/catiledlayers-are-fun</id>
   <content type="html">&lt;p&gt;One of the big issues I’m trying to address for &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; 1.0 is related to video memory:&lt;/p&gt;

&lt;p&gt;Core Animation likes to cache any imagery you insert into a layer onto the user’s graphics card, which is fantastic when you’re running on a machine with more than 256Mb VRAM - things are smooth as silk and you get great fades between changes. Unfortunately, for users running on Macs that don’t have that much VRAM there is a big problem - if the image you load into the layer is too big to fit into VRAM, Core Animation just doesn’t draw it. White backgrounds for the win.&lt;/p&gt;

&lt;p&gt;Apple’s answer to this problem is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CATiledLayer&lt;/code&gt;. Basically, it allows you divide a much larger image into smaller chunks that &lt;em&gt;can&lt;/em&gt; be cached on older video cards. For &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt;, I’m working on replicating the drawing styles of the standard Mac OS X desktop background - “Fit To Screen”, “Fill Screen”, “Stretch To Fill Screen”, “Center” and “Tile”. Tiled desktops are fine - I’m rendering those using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CATiledLayer&lt;/code&gt; in the build you’re all using right now (1.0fc4).&lt;/p&gt;

&lt;p&gt;What’s interesting though is what happens when I play lazy programmer:&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/3987685?byline=0&amp;amp;portrait=0&quot; width=&quot;720&quot; height=&quot;451&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; class=&quot;widescreen&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Lovely, no? It would be a cool effect with a longer fade, and if I weren’t already getting complaints about how slow &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; is to change desktop backgrounds right now. I’m still working on the final code - I’ll post it when it’s done for reference - but the simple answer to this problem is twofold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Make the tiles as large as you can&lt;/em&gt; - this isn’t too tricky. Apple defaults this to 256px by 256px, but I haven’t done enough research to know what’s reasonable - it’s really going to be based upon your target audience, and whether they have decent graphics cards or not;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Cache the “sliced” image pieces&lt;/em&gt; - the video you see above is the result of me slicing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGImageRef&lt;/code&gt; up in real time;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoy the (unintended) effect!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Me too, me too!</title>
   <link href="https://tonyarnold.com/2009/03/15/me-too-me-too.html"/>
   <updated>2009-03-15T11:48:00+11:00</updated>
   <id>https://tonyarnold.com/2009/03/15/me-too-me-too</id>
   <content type="html">&lt;p&gt;Filed under the most daring display of FUD and stopwatch timing this week: &lt;a href=&quot;http://arstechnica.com/microsoft/news/2009/03/microsofts-own-speed-tests-show-ie-beating-chrome-firefox.ars&quot;&gt;Microsoft’s own speed tests show IE beating Chrome, Firefox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Riiiiiight.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Move your application windows between spaces</title>
   <link href="https://tonyarnold.com/2008/12/05/move-your-application-windows-between-spaces.html"/>
   <updated>2008-12-05T22:57:00+11:00</updated>
   <id>https://tonyarnold.com/2008/12/05/move-your-application-windows-between-spaces</id>
   <content type="html">&lt;p&gt;I puzzled for a few hours over this the other night - it’s something that used to work in VirtueDesktops, and for some reason I just assumed it no longer functioned under Mac OS X 10.5. Aside from an embarrassing bout of forgetting to get the window number properly, this turned out to be remarkably simple.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You’ll need a copy of the &lt;a href=&quot;http://code.google.com/p/undocumented-goodness/source/browse/trunk/CoreGraphics/CGSPrivate.h&quot;&gt;CGSPrivate header&lt;/a&gt; in your project.&lt;/p&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How to&lt;/h2&gt;

&lt;p&gt;Simply use the following code, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibo_window&lt;/code&gt; is an Interface Builder outlet to an NSWindow in your XIB file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;CGSWindowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGSWindowID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibo_window&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;windowNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The following integer represents the space you want to move the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// window to - the array is not zero-based - Space 1 == 1, Space 2 == 2, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spaceToMoveTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Window count can be more than one, but for this example we're &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// using a single window&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now for the magical call:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CGSMoveWorkspaceWindowList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_CGSDefaultConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
                           &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;n&quot;&gt;windowCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;n&quot;&gt;spaceToMoveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// If you want to check which space a window is on, simple use the &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// following code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;n&quot;&gt;CGSGetWindowWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_CGSDefaultConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;windowId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workspaceID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Your window is now on space %i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Easy, huh? I’m pretty sure this won’t work across processes (that’s why all the old desktop managers insert code into the running Dock application - it’s one of the only applications that has permission to muck about with other application’s windows). You should also probably try to intercept any errors thrown by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGS*&lt;/code&gt; methods, but I’ll leave that as an exercise to you, gentle reader.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hyperspaces 1.0 Public Preview</title>
   <link href="https://tonyarnold.com/2008/10/16/hyperspaces-1-public-preview.html"/>
   <updated>2008-10-16T23:17:00+11:00</updated>
   <id>https://tonyarnold.com/2008/10/16/hyperspaces-1-public-preview</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/hyperspaces-switcher-1306152548.png&quot; alt=&quot;Screenshot of Hyperspaces switcher from the beta release&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;About 12 months ago, I had a conversation with a &lt;a href=&quot;http://brok3n.org/&quot;&gt;friend of mine&lt;/a&gt; that convinced me it was time to try my hand at writing a commercial software product. At the time, I had only very recently dropped development of VirtueDesktops and was seriously considering just taking a break from Mac development for a while - thankfully I didn’t, and today I’m releasing the fruits of 12 months of learning and hard work: &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces 1.0 Public Preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what’s this all about, you ask? Put simply, Hyperspaces works hand-in-hand with Apple’s Spaces to add back a few key features that traditional virtual desktop applications provide, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Different desktop backgrounds per-space;&lt;/li&gt;
  &lt;li&gt;Coloured tinting of desktop backgrounds per-space;&lt;/li&gt;
  &lt;li&gt;Naming of each space;&lt;/li&gt;
  &lt;li&gt;Desktop labels that show each space’s name;&lt;/li&gt;
  &lt;li&gt;Customisable hotkeys to switch directly to each space;&lt;/li&gt;
  &lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve got quite a few features on the drawing board including a much more customisable switcher and more customisation options for each space.&lt;/p&gt;

&lt;p&gt;I also need to thank quite a few people who’ve been a huge support and invaluable resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My girl Leah - you can have your boy back for a bit now sweetheart :)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://macrabbit.com/&quot;&gt;Jan Van Boghout&lt;/a&gt; for all of the code and advice at every stage of development;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://seanpatrickobrien.com/&quot;&gt;Sean O’Brien&lt;/a&gt; for the kickass space selector view in the preferences (and quite a few other groovy graphical doodads!);&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cc.gatech.edu/~svoida/&quot;&gt;Steve Voida&lt;/a&gt; who helped reverse engineer quite a number of new private CGS calls (thanks Steve!);&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://acqualia.com/&quot;&gt;Nik Youdale and Zac Cohan from Aqualia&lt;/a&gt; for advice and crazy code that I barely understand;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://br0k3n.org/&quot;&gt;Chris Forsythe&lt;/a&gt; for the kick in the pants to do this in the first place;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cocoia.com/&quot;&gt;Sebastiaan De With&lt;/a&gt; for the incredible application icon;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://neilang.com/&quot;&gt;Neil Ang&lt;/a&gt;, &lt;a href=&quot;http://jamespamplin.com/&quot;&gt;James Pamplin&lt;/a&gt; and &lt;a href=&quot;http://deanjrobinson.com/&quot;&gt;Dean Robinson&lt;/a&gt; - for constantly, consistently pestering me to finish this app - you guys are awesome to work with - roll out, CocoaBots!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s been a long and rewarding road over the last year, and I wouldn’t trade a minute of it but here’s a couple of things I’ll know not to do next time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Working full-time while trying to get your first product off the ground is really hard - I found taking a break once every few weekends really made a difference;&lt;/li&gt;
  &lt;li&gt;Don’t buy a house in the middle of writing your first application (on top of working full time);&lt;/li&gt;
  &lt;li&gt;Don’t start renovating a house in the middle of writing your first application (on top of … you get the picture);&lt;/li&gt;
  &lt;li&gt;Be ready to drop features for 1.0. The Hyperspaces alphas had some great features that will probably come back in a future release, but they weren’t critical to what I am trying to achieve with Hyperspaces;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll post a post-mortem that goes into some detail about the programming challenges I faced in a few days. OK, enough rambling from me - go download the preview and &lt;a href=&quot;mailto:tony@tonyarnold.com&quot;&gt;let me know what you think&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Fixing an annoying Exposé bug in NSWindow</title>
   <link href="https://tonyarnold.com/2008/08/10/fix-an-annoying-expose-bug-with-nswindow.html"/>
   <updated>2008-08-10T22:20:00+10:00</updated>
   <id>https://tonyarnold.com/2008/08/10/fix-an-annoying-expose-bug-with-nswindow</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/missing_shadows-1306152494.jpg&quot; alt=&quot;Missing shadows on windows in Exposé&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ve seen it before - Exposé’s F-10 mode stops working for no apparent reason. F-9 is still good to go, but F-10 just looks busted.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Your application has set one of it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSWindow&lt;/code&gt; instances to the desktop level or lower (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kCGDesktopIconWindowLevel&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kCGDesktopWindowLevelKey&lt;/code&gt; are where it all seems to start).&lt;/p&gt;

&lt;h2 id=&quot;can-i-fix-it&quot;&gt;Can I fix it?&lt;/h2&gt;

&lt;p&gt;Yes - fixing this problem is simple - either stop using windows at or below the desktop icon level, or add the following code to a window category or subclass in your project and execute the “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clearExposeTags&lt;/code&gt;” method upon an active instance of your troublesome &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSWindow&lt;/code&gt;. If you’re using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGSPrivate.h&lt;/code&gt;, you can just include the method without all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;typedefs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extern&lt;/code&gt;s.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSTagNone&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// No tags&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSTagExposeFade&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fade out when Expose activates.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSTagNoShadow&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No window shadow.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSTagTransparent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Transparent to mouse clicks.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSTagSticky&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Appears on all workspaces.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSWindowTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSConnection&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_CGSDefaultConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CGSClearWindowTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
																	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
																	&lt;span class=&quot;n&quot;&gt;CGSWindowTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
																	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thirtyTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OSStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clearExposeTags&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGSWindowTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;wid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;windowNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_CGSDefaultConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSClearWindowTags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>MSIE7 does not support modern web standards</title>
   <link href="https://tonyarnold.com/2008/07/14/ie-does-not-support-modern-web-standards.html"/>
   <updated>2008-07-14T07:59:00+10:00</updated>
   <id>https://tonyarnold.com/2008/07/14/ie-does-not-support-modern-web-standards</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/mobileme_iewarning-1306152325.jpg&quot; alt=&quot;MobileMe IE Warning Screenshot&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Found here: &lt;a href=&quot;http://www.apple.com/mobileme/migrating/&quot;&gt;http://www.apple.com/mobileme/migrating/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, someone has the balls to out and out say it in a professional context. &lt;strong&gt;Microsoft Internet Explorer 7 does not support modern web standards&lt;/strong&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Convenience #DEFINEs</title>
   <link href="https://tonyarnold.com/2008/07/05/convenience-defines.html"/>
   <updated>2008-07-05T13:00:00+10:00</updated>
   <id>https://tonyarnold.com/2008/07/05/convenience-defines</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Lazy programmer, indeed! After doing some research myself this afternoon (at the prompting of Karsten), I’d recommend not using anything but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZNCGAutoRelease()&lt;/code&gt; method below - the others aren’t dangerous, but they’re really not necessary and just obscure your ability to properly debug your code. As for using macros, well, I guess that’s a matter of personal preference - what I’ve seen so far is that it does make debugging harder - you’re probably better off implementing proper methods for repeatable tasks. But it works if you want to use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first started working on VirtueDesktops (all those years ago), I was still new to Objective-C and very new to the concept of (mostly) manual memory management. Thankfully Thomas (the previous developer) had the foresight to do what all good, lazy programmers should do and write himself a few small convenience methods into his codebase.&lt;/p&gt;

&lt;p&gt;They’ve had a couple of minor additions and changes since then, but line-for-line, they’ve stood the test of time and I find them an invaluable way to reduce some of the fuss involved in manually managing your object assignments, copies and releases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ZNCGAutoRelease(x) (__typeof(x))[NSMakeCollectable(x) autorelease]
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ZNAssign(aTarget, aSource) \
if (aTarget != nil) {              \
    [aTarget autorelease];         \
}                                  \
aTarget = [aSource retain];
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ZNAssignCopy(aTarget, aSource) \
if (aTarget != nil) {                  \
    [aTarget autorelease];             \
}                                      \
aTarget = [aSource copy];
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ZNRelease(aTarget)   \
if (aTarget != nil) {        \
    id oldObject = aTarget;  \
    aTarget = nil;           \
    [oldObject release];     \
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use these &lt;strong&gt;everywhere&lt;/strong&gt; in my code, but just the other day I discovered the absolutely incredibly wonderful &lt;a href=&quot;http://clang.llvm.org/StaticAnalysis.html&quot;&gt;Clang Static Analysis&lt;/a&gt; tools (more on this shortly!), and based on some feedback it gave around these calls (nothing bad!) it made me wonder - should I be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt; to create conveniences for my methods? Is this best practice, or should I just go back to doing this all by hand?&lt;/p&gt;

&lt;p&gt;I’m hoping some of my CocoaPeers™ will be able to provide me with some advice here, but if you think the code’s good for your needs - go for your life and use it.&lt;/p&gt;

&lt;p&gt;Oh, and happy 4th of July to our friends in the states. We’re waiting for you here on the 5th :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Introducing the face of Hyperspaces</title>
   <link href="https://tonyarnold.com/2008/06/06/introducing-the-face-of-hyperspaces.html"/>
   <updated>2008-06-06T02:33:00+10:00</updated>
   <id>https://tonyarnold.com/2008/06/06/introducing-the-face-of-hyperspaces</id>
   <content type="html">&lt;p&gt;I’d like to introduce everyone to the greatest icon to ever grace a screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/hyperspaces_icon-1306152294.png&quot; alt=&quot;Hyperspaces Icon&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gorgeous piece of design was put together by Sebastiaan De With of &lt;a href=&quot;http://cocoia.com&quot;&gt;Cocoia.com&lt;/a&gt; and &lt;a href=&quot;http://icondesigner.net/&quot;&gt;IconDesigner.net&lt;/a&gt; fame. He was an absolute pleasure to work with, and I’ve heard nothing but praise for him from my peers. He’s also got a blog post up his sleeve about &lt;a href=&quot;http://blog.cocoia.com/2008/06/13/faster-than-light-making-the-hyperspaces-icon/&quot;&gt;the process we went through together to end up with what you see above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and the promo site for Hyperspaces is up: &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;http://hyperspacesapp.com/&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>On how primary function becomes secondary</title>
   <link href="https://tonyarnold.com/2008/06/05/on-how-primary-function-becomes-secondary.html"/>
   <updated>2008-06-05T01:35:00+10:00</updated>
   <id>https://tonyarnold.com/2008/06/05/on-how-primary-function-becomes-secondary</id>
   <content type="html">&lt;p&gt;Over the last month, I’ve been slowly expanding my list of testers who are helping me with &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt;. Initially, most of the testers viewed &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; as a novelty (which it is), but didn’t leave it running. They’d test whether a new build worked, and then go back to what they were doing. It was an interesting thing to watch: I’d poured months and months of my time into making the visual space switcher function properly, and nobody was really using it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does it show a near real-time overview of what’s happening on all of your spaces? &lt;strong&gt;Check.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Does it use nearly no CPU? &lt;strong&gt;Check.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Does it look good? myyeeeeah - &lt;strong&gt;it’s not terrible.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially, I didn’t pay much attention to what was happening here, and just plowed through adding in some of what I considered to be secondary features. This included the ability to set a different desktop image, a tinted colour overlay and text labels on each of your spaces.&lt;/p&gt;

&lt;p&gt;It turns out I was seriously off-base with what people actually miss from &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt; and it’s ilk. The big ticket item that seems to be missing from Apple’s implementation with Spaces is context: &lt;strong&gt;Which space am I currently working in?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyhow, those are just my observations - don’t assume that you know what’s important based solely upon your own experience and ideas. In my case, this wasn’t time lost or wasted - the technical work involved in gathering information about how Spaces works is used just about everywhere in &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt;, and once I’ve released the app, I’ll share a lot of what I’ve learned so that others can benefit from that research.&lt;/p&gt;

&lt;p&gt;Now before &lt;a href=&quot;http://neilang.com/&quot;&gt;Neil&lt;/a&gt; has a go at me for not releasing a public beta before &lt;a href=&quot;http://developer.apple.com/wwdc/&quot;&gt;WWDC&lt;/a&gt; - because apparently he’s not too keen on attending with a “has been” - I am serious about getting &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; into your hands as soon as I can, but I’m not going to release something that is &lt;strong&gt;almost&lt;/strong&gt; good enough. I’m almost there, and you can help me - I’m about to build the final visuals for the switcher, and I’d appreciate some feedback.&lt;/p&gt;

&lt;p&gt;Here’s how it looks in 1.0 alpha build 404 (heh - yes, I see it too):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/switcher_now.png&quot; alt=&quot;Current Hyperspaces switcher&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It functions much as you’d expect - you click on a space to switch to it. The active space shows a live-updating image of your current space, and the others show ghosted representations of your windows. Everything is drawn using CoreAnimation, so transitions of window positions smoothly fade in and out as window positions change on other spaces.&lt;/p&gt;

&lt;p&gt;Here are my rough ideas mocked up using Fireworks for where this is could head:&lt;/p&gt;

&lt;h2 id=&quot;the-quicksilver-concept&quot;&gt;The QuickSilver concept&lt;/h2&gt;

&lt;p&gt;The first is a QuickSilver-style window that would include other functionality and configuration options:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/idea_window.png&quot; alt=&quot;QuickSilver-style switcher idea&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-hud-concept&quot;&gt;The HUD concept&lt;/h2&gt;

&lt;p&gt;The second (and my current front-runner with a bit more polish) is this black, hud-like window. It also reflects some of the design elements of Hyperspaces very, very unique icon which I’ll be introducing before the week is out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/idea_black.png&quot; alt=&quot;HUD-style switcher idea&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave your thoughts in the comments.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Issue tracking for free</title>
   <link href="https://tonyarnold.com/2008/06/01/issue-tracking-for-free.html"/>
   <updated>2008-06-01T16:24:00+10:00</updated>
   <id>https://tonyarnold.com/2008/06/01/issue-tracking-for-free</id>
   <content type="html">&lt;p&gt;I dislike switching tracks as much as anyone, but after Steven Frank’s twitter post the other night about Redmine (&lt;a href=&quot;http://www.redmine.org/&quot;&gt;http://www.redmine.org/&lt;/a&gt;), I needed to try it out. I’ve been a long-time user of Edgewall’s Trac (&lt;a href=&quot;http://trac.edgewall.com/&quot;&gt;http://trac.edgewall.com/&lt;/a&gt;) using it in my day job for about 3 years now - and I love it, it’s simple, clean and fast. But it’s a pain in the proverbial to get running due to some oddball dependencies, and it’s really only suited to a single product per-instance.&lt;/p&gt;

&lt;p&gt;Redmine runs on a bog-standard &lt;a href=&quot;http://www.rubyonrails.com/&quot;&gt;Ruby on Rails&lt;/a&gt; install (which my host of choice - &lt;a href=&quot;http://dreamhost.com/&quot;&gt;http://dreamhost.com/&lt;/a&gt; - supports out of the box) and it appears to be as simple as Trac to use.&lt;/p&gt;

&lt;p&gt;So I’ve decided to trial it for &lt;a href=&quot;http://www.hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; - once I’ve released the public beta, there will be ties from the app to report issues directly into our &lt;a href=&quot;http://www.redmine.org/&quot;&gt;Redmine&lt;/a&gt; set-up. If you want to sign-up for an account now and have a look around, feel free - you can find it at &lt;a href=&quot;http://issues.thecocoabots.com/&quot;&gt;http://issues.thecocoabots.com/&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How late I am…</title>
   <link href="https://tonyarnold.com/2008/05/11/how-late-i-am.html"/>
   <updated>2008-05-11T13:20:00+10:00</updated>
   <id>https://tonyarnold.com/2008/05/11/how-late-i-am</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/overdue_things-1306152375.jpg&quot; alt=&quot;Hyperspaces Public Beta 1 — 41 days overdue&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This just demonstrates how much your planning ends up meaning when you have a full-time job in addition to developing an application. I started earnestly developing Hyperspaces just under 6 months ago now (17th December, 2007 is the date of the first subversion commit). I’d been toying with the idea of a version of VirtueDesktops that wasn’t an insane hack, but instead worked with Apple’s implementation of virtual desktops for a few months prior. Until that week, I wasn’t sure it would be possible to gather enough information or interact with Spaces in a way that would even let me achieve what I wanted to.&lt;/p&gt;

&lt;p&gt;Is the development vs. full-time job dilemma common among other small developers? Long term, I’d love to be able to develop great mac applications full-time, but it seems to be a catch-22 situation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>These are the voyages of the USS Hyperspaces…</title>
   <link href="https://tonyarnold.com/2008/05/10/these-are-the-voyages-of-the-uss-hyperspaces.html"/>
   <updated>2008-05-10T16:20:00+10:00</updated>
   <id>https://tonyarnold.com/2008/05/10/these-are-the-voyages-of-the-uss-hyperspaces</id>
   <content type="html">&lt;video width=&quot;720&quot; height=&quot;450&quot; poster=&quot;http://static.tonyarnold.com/080510-155513-desktop-1306154371.jpg&quot; controls=&quot;yes&quot; preload=&quot;none&quot; class=&quot;widescreen&quot;&gt;
  &lt;source src=&quot;http://static.tonyarnold.com/080510-155513-desktop-1306154384.m4v&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;
&lt;/video&gt;

&lt;p&gt;Hyperspaces is feature-complete, I’m just working on the user interface controls to configure the desktop elements you can see in the video. I have a few more bugs to fix, a web site to construct and a tiny bit of documentation to write, and then (finally) I’ll be releasing a public beta. Yes, I know what I said - I’m taking it back. I want Hyperspaces to be as polished as &lt;a href=&quot;http://coverstream.net/&quot;&gt;CoverStream&lt;/a&gt;, and right now it’s not. But it will be - and it will be soon, but whereas 24 hours ago soon meant “Monday”, now it means “before WWDC08”. Flame on.&lt;/p&gt;

&lt;p&gt;Oh, and if I haven’t said it enough alread - &lt;strong&gt;Core Animation is seriously the poo&lt;/strong&gt;. If you’re not using it in your apps, you should be. Watch the video and tell me you don’t want implicit animation.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Integrated documentation for Xcode projects</title>
   <link href="https://tonyarnold.com/2008/03/28/integrated-documentation-for-xcode-projects.html"/>
   <updated>2008-03-28T15:05:00+11:00</updated>
   <id>https://tonyarnold.com/2008/03/28/integrated-documentation-for-xcode-projects</id>
   <content type="html">&lt;p&gt;I’ve been thinking for the past week or so about how I can contribute something back to the mac development community - a lot of good people spend a lot of time helping me out with my issues as they come up, and I believe improving our toolchain is probably the best way for me to contribute. Documentation, to be specific.&lt;/p&gt;

&lt;p&gt;If we take the time to properly document and comment our source code, we’re unlikely to want to have to re-document that into a human readable format such as HTML or PDF, right? I’ve previously used tools such as &lt;a href=&quot;http://developer.apple.com/opensource/tools/headerdoc.html&quot;&gt;HeaderDoc&lt;/a&gt; and &lt;a href=&quot;http://www.naturaldocs.org/&quot;&gt;NaturalDocs&lt;/a&gt; depending on the language and framework I’m coding in to achieve this end – with wildly varying results. HeaderDoc’s default output is quite ugly, and has some glaring omissions in terms of it’s parsing of some of the newer documentation tags.&lt;/p&gt;

&lt;p&gt;So I’m thinking about starting up a &lt;a href=&quot;http://code.google.com/&quot;&gt;Google Code&lt;/a&gt; project around this, and I’m just trying to get a feel for what people think about this idea, what they would use, and how they would see this working. So far I’ve solicited a little feedback and the following are things I know I’d like to see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Xcode build integration&lt;/strong&gt;: the generation of this documentation should work as part of the Xcode build process. No messing around with external tools;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comment formats should use what’s already out there&lt;/strong&gt;: Lots of our code is already documented using HeaderDoc’s comment format - we should try to expand upon that if we need to - not replace it (but I’m open to suggestion here);&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The generated output should look good&lt;/strong&gt;. No arguments there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comments ahoy, my peers!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Aluminium MacBooks can’t jump</title>
   <link href="https://tonyarnold.com/2008/03/08/aluminium-macbooks-cant-jump.html"/>
   <updated>2008-03-08T23:36:00+11:00</updated>
   <id>https://tonyarnold.com/2008/03/08/aluminium-macbooks-cant-jump</id>
   <content type="html">&lt;p&gt;I know a few of you are anxiously awaiting a public release of &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt;. Unfortunately, there’s not going to be a public release for a few weeks yet. I know - I said early March, but my MacBook Pro tried to master the finer points of flying a few weeks ago, and it’s interesting how badly those shiny silver beasts stand up to a small drop. I’ve just got &lt;a href=&quot;http://www.apple.com/macbookpro/&quot;&gt;my replacement&lt;/a&gt; this past week, and I’ve only just got all my development tools and settings right back where I want them.&lt;/p&gt;

&lt;p&gt;Oh, and I’ve also been cleaning up and painting our kitchen - but that’s another story with photos to come. In any case, the &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;Hyperspaces&lt;/a&gt; icon is done (and I’ll be showing it off shortly!), the feature set is being locked down, and my list of pre-beta tasks is down to 14 items - some of them quite small, some of them larger (“Watch for fsevent changes to the Dock’s plist file to trigger changes in the enabled state of Spaces” for instance). Almost there people - I hope you guys love it as much as I hope you will! I’ll post when there’s more, but I’m hoping to put up a feature preview on &lt;a href=&quot;http://hyperspacesapp.com/&quot;&gt;http://hyperspacesapp.com&lt;/a&gt; in the next week - I just need to get some of the finer points of the user interface locked down!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Microsoft finally gets it: web standards for all</title>
   <link href="https://tonyarnold.com/2008/03/04/microsoft-finally-gets-it-web-standards-for-all.html"/>
   <updated>2008-03-04T19:17:00+11:00</updated>
   <id>https://tonyarnold.com/2008/03/04/microsoft-finally-gets-it-web-standards-for-all</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/ie/archive/2008/03/03/microsoft-s-interoperability-principles-and-ie8.aspx&quot;&gt;Microsoft’s Interoperability Principles and IE8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best news I’ve heard for a long time. Now we can all enjoy proper standards support, no matter what browser we choose to use. Is this a new era for Microsoft?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Releasing a public beta of your application</title>
   <link href="https://tonyarnold.com/2008/03/02/releasing-a-public-beta-of-your-application.html"/>
   <updated>2008-03-02T00:57:00+11:00</updated>
   <id>https://tonyarnold.com/2008/03/02/releasing-a-public-beta-of-your-application</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Take what I’ve posted here with a grain of salt: it’s June 2009, and Hyperspaces has been in beta for close to 6 months. Life tends to happen, and I’m sure my users are happier that I chose to give them something to play with. I’ve learnt a lot about the process though, which I’ll blog about at some point.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the Hyperspaces public beta coming quite soon, I’ve been thinking about how to release beta software, and when it’s appropriate to do so.&lt;/p&gt;

&lt;p&gt;My previous piece of software - VirtueDesktops - had eternal beta syndrome (EBS). Hell, while I was running the project I’m not even sure I’d have called it a beta knowing what I do now. &lt;strong&gt;This was a huge fucking mistake&lt;/strong&gt;. And it showed. Users got awfully upset, and the only reason I got away with it was because I didn’t charge anything for the software.&lt;/p&gt;

&lt;h2 id=&quot;release-your-beta-when-you-have-weeks-left-until-release---not-months&quot;&gt;Release your beta when you have weeks left until release - not months&lt;/h2&gt;

&lt;p&gt;How often do you download a great new piece of software that’s in beta, and then spend the next 6 months waiting for it to become stable enough for daily use? Seriously, if you couldn’t realistically release a bug-free version of your software within 4 weeks of putting out your public beta - &lt;strong&gt;hold off and get your software to a point where you can!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;protect-your-reputation-above-all-else&quot;&gt;Protect your reputation above all else&lt;/h2&gt;

&lt;p&gt;I believe the most important thing I have as a developer is my reputation. Skills, languages and patterns can be learnt - reputation is something that has to be earned, and is really hard to rebuild if you damage it. In my experience buggy releases or a constantly “in-beta” product are two of the fastest ways to cripple your reputation.&lt;/p&gt;

&lt;h2 id=&quot;if-something-goes-wrong---make-sure-the-user-can-let-you-know-as-easily-as-possible&quot;&gt;If something goes wrong - make sure the user can let you know as easily as possible&lt;/h2&gt;

&lt;p&gt;This applies regardless of the release status of your application - if something goes wrong, the user will only let you know if:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The error really pisses them off; or&lt;/li&gt;
  &lt;li&gt;It’s incredibly easy to do so&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I generally believe in collecting as much information as possible and automatically posting this back to your servers - this way, you don’t need to ask the user to root about in their Library folder. &lt;strong&gt;If you’re going to do this, make sure you let the user know exactly what’s happening!&lt;/strong&gt;. When I was coding VirtueDesktops, I used Unsanity’s Smart Crash Reporter - and was quite happy with it. I’m still not sure what I’ll use for Hyperspaces - APE is out for Leopard now, but it’s not out of beta yet.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Don’t release your software before it’s ready, and make sure it’s easy to report errors when they happen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Another Gentle Nudge in a Spacey Direction</title>
   <link href="https://tonyarnold.com/2008/02/07/another-gentle-nudge-in-a-spacey-direction.html"/>
   <updated>2008-02-07T01:50:00+11:00</updated>
   <id>https://tonyarnold.com/2008/02/07/another-gentle-nudge-in-a-spacey-direction</id>
   <content type="html">&lt;video width=&quot;720&quot; height=&quot;585&quot; poster=&quot;http://static.tonyarnold.com/hyperspaces_preview_2-1306153946.jpg&quot; controls=&quot;yes&quot; preload=&quot;none&quot; class=&quot;widescreen&quot;&gt;
  &lt;source src=&quot;http://static.tonyarnold.com/hyperspaces_preview_2-1306153932.m4v&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;
&lt;/video&gt;

&lt;p&gt;Closer and closer my eager beta beavers, closer and closer…&lt;/p&gt;

&lt;p&gt;At this stage, I need to clear a couple of things up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hyperspaces will be &lt;strong&gt;priced around $15 USD&lt;/strong&gt; when it is released;&lt;/li&gt;
  &lt;li&gt;Hyperspaces &lt;strong&gt;augments Spaces - it doesn’t modify it’s behaviour&lt;/strong&gt;. Hyperspaces won’t “fix” how Spaces interacts with windows or applications (at least not in version 1.0);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still with me after that? Cool - &lt;strong&gt;I’m aiming for a public beta release at the beginning of March&lt;/strong&gt;. Leah and I are settling the purchase of our first home next week, otherwise you’d have it sooner!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hyperspaces: Don’t tell anyone I’ve shown you this…</title>
   <link href="https://tonyarnold.com/2008/01/03/dont-tell-anyone-ive-shown-you-this.html"/>
   <updated>2008-01-03T01:34:00+11:00</updated>
   <id>https://tonyarnold.com/2008/01/03/dont-tell-anyone-ive-shown-you-this</id>
   <content type="html">&lt;video width=&quot;720&quot; height=&quot;466&quot; poster=&quot;http://static.tonyarnold.com/hs_web-poster-1306154058.jpg&quot; controls=&quot;yes&quot; preload=&quot;none&quot; class=&quot;widescreen&quot;&gt;
  &lt;source src=&quot;http://static.tonyarnold.com/hs_web-desktop-1306154069.m4v&quot; type=&quot;video/mp4&quot; /&gt;&amp;lt;/source&amp;gt;
&lt;/video&gt;

&lt;p&gt;Now seriously, you never saw this…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to create a grid of CALayers</title>
   <link href="https://tonyarnold.com/2007/12/14/how-to-create-a-grid-of-calayers.html"/>
   <updated>2007-12-14T00:37:00+11:00</updated>
   <id>https://tonyarnold.com/2007/12/14/how-to-create-a-grid-of-calayers</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Update: this is indeed a dodgy method I’ve posted below. I’ll update this post when I can, but you’re better off digging out your 8th grade maths and working out the coordinates of surrounding cells and constraining all edges to each other. Friends don’t let friends blog at 12.30am.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I’ve been puzzling for a few weeks through the dim and darkened alleyways of &lt;a href=&quot;http://www.apple.com/macosx/technology/coreanimation.html&quot;&gt;Leopard’s new Core Animation APIs&lt;/a&gt; and the rather wonderful CALayer. One of the features I’m planning for &lt;a href=&quot;/projects/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt; is a desktop pager that will show basic approximations of your on-screen windows - sort of like what used to be in VirtueDesktops, but way cooler because it will use Core Animation to smoothly animate changes in state.&lt;/p&gt;

&lt;p&gt;Unfortunately, I hit a rather interesting problem while attempting to draw a grid of self-positioning CALayers. See, you can tie CALayers together using constraints, but in a traditional grid of objects you need to tie all the edges of the grid objects to each other (and the outer grid objects to the frame of the constraining frame) - but you can’t constrain CALayers using CALayers that haven’t been created yet (still with me? sounds sane, right?).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/calayer_grid_example-1306152218.png&quot; alt=&quot;CALayer grid example&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the answer turned out to be to cheat. First, constrain the width and height of all CALayer grid objects to be consistently based on the height and width of the constraining CALayer (scaled to fit the number of columns and rows we’re trying to get onscreen). Tie all the “outer” CALayers to the constraining CALayer on the edges where they connect with it. Now, tie the left and top edges of all CALayers to the right and bottom edges of the CALayers around them as shown to the left.&lt;/p&gt;

&lt;p&gt;So in the interests of getting more Core Animation code out there, here is my somewhat dodgy, but completely re-usable approach to drawing a grid of CALayers in your own monstrosity of an application. I’m open to being completely corrected by someone willing to write a proper CALayoutManager for this. &lt;a href=&quot;http://neilang.com/&quot;&gt;Neil&lt;/a&gt;, &lt;a href=&quot;http://jamespamplin.com/&quot;&gt;James&lt;/a&gt; - now that you’ve been through Cocoa bootcamp, I expect to see some really inappropriate Core Animation, OK? Use this as a starting point:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;NSRect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pagerViewFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pagerLayers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWantsLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;constraintsLayer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anchorPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoresizingMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCALayerWidthSizable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCALayerHeightSizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blackColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentsGravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAGravityResizeAspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masksToBounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraintLayoutManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Initialization code here.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HSSpaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HSSpaces&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerViewFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagerViewFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HSSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// We need to calculate whether we are:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  a) Dealing with an edge&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//    i) Right?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//    ii) Left?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//    iii) Top?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//    iv) Bottom?&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRightEdge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLeftEdge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isTopEdge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isBottomEdge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;SpaceLayer%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGRectMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPointMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yellowColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSColor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blackColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSublayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;currentColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


  &lt;span class=&quot;c1&quot;&gt;// Set-up constraints&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintHeight&lt;/span&gt;
                               &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintHeight&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;scale:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;offset:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintWidth&lt;/span&gt;
                               &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintWidth&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;scale:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spacesInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;floatValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;offset:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Minimum X&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLeftEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinX&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinX&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;SpaceLayer%i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Maximum X&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRightEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxX&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Minimum Y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBottomEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinY&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Maximum Y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isTopEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxY&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;superlayer&quot;&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceLayer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAConstraint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constraintWithAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMaxY&lt;/span&gt;
                                   &lt;span class=&quot;nl&quot;&gt;relativeTo:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;SpaceLayer%i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
                                    &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCAConstraintMinY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Growling Panic Style</title>
   <link href="https://tonyarnold.com/2007/12/09/growling-panic-style.html"/>
   <updated>2007-12-09T20:04:00+11:00</updated>
   <id>https://tonyarnold.com/2007/12/09/growling-panic-style</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/growling_panic_style_preview-1306152190.png&quot; alt=&quot;Growling Panic Style Preview&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I got a little bored with the default Growl Styles recently and (inspired by &lt;a href=&quot;http://panic.com/&quot;&gt;Panic’s&lt;/a&gt; new web designs) whipped up a new style.&lt;/p&gt;

&lt;p&gt;I hope you like it! Thanks to &lt;a href=&quot;http://stevenf.com/&quot;&gt;Steven Frank&lt;/a&gt; for giving me permission to post this.&lt;/p&gt;

&lt;p&gt;Download the &lt;a href=&quot;/projects/growling-panic-style/&quot;&gt;Growling Panic Style&lt;/a&gt; from the project page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Detecting when the active Space changes</title>
   <link href="https://tonyarnold.com/2007/11/11/detecting-when-the-active-space-changes.html"/>
   <updated>2007-11-11T00:00:00+11:00</updated>
   <id>https://tonyarnold.com/2007/11/11/detecting-when-the-active-space-changes</id>
   <content type="html">&lt;p&gt;OK, so there’s been a discussion about this on the cocoa-dev list of late, and no-one answered the question - I figure I’ll jump into the fray given that this is exactly what I’ve been working on with Hyperspaces.&lt;/p&gt;

&lt;p&gt;There are two things you have to understand up front:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is a notification “com.apple.switchSpaces” posted when a user chooses to switch spaces via the menu extra&lt;/strong&gt;. This notification can also be (ab)used to switch spaces using your app as well - however…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is no other notification that your active space has changed&lt;/strong&gt;, and it is only posted by the menu extra. &lt;strong&gt;You need to check for changes from the CoreGraphicsServer&lt;/strong&gt; - the easiest way to do that is as follows. It’s up to you to write the code that uses this, but attaching it to a simple NSTimer would probably work just fine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj-c&quot; data-lang=&quot;obj-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGSSpaceNumber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spaceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CGSGetWorkspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_CGSDefaultConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberWithInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spaceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use this method in &lt;a href=&quot;http://thecocoabots.com/hyperspaces/&quot;&gt;Hyperspaces&lt;/a&gt;, and it works just fine for my purposes (with the requisite delay associated with my application having to scan for changes). Apple’s Eric Schlegel &lt;a href=&quot;http://www.cocoabuilder.com/archive/message/cocoa/2007/11/11/192797&quot;&gt;explains the reasoning behind why there is no notification on the cocoa-dev list&lt;/a&gt;. Long story short, it sounds like Apple’s not quite done developing Spaces yet, and they don’t want people relying on APIs that aren’t finalised.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Of holidays and adventure!</title>
   <link href="https://tonyarnold.com/2007/09/25/of-holidays-and-adventure.html"/>
   <updated>2007-09-25T19:23:00+10:00</updated>
   <id>https://tonyarnold.com/2007/09/25/of-holidays-and-adventure</id>
   <content type="html">&lt;p&gt;Hello avid readers!&lt;/p&gt;

&lt;p&gt;I’m typing this post from an internet cafe in Zadar, Croatia so please excuse any stray punctuation or misspelling. For my friends and family back home, I can’t seem to login to Gmail here, so don’t expect any messages from me for a bit. You’ll have to keep yourselves happy with my &lt;a href=&quot;http://www.flickr.com/photos/tonyarnold/sets/72157602008569659/&quot;&gt;flickr feed&lt;/a&gt; - there are lots of great photos of Leah and myself being completely stressed out and lost in foreign cities!&lt;/p&gt;

&lt;p&gt;Oh, and for anyone still reading that’s interested in mac news, let the speculation begin: &lt;a href=&quot;http://hyperspacesapp.com&quot;&gt;http://hyperspacesapp.com/&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>I’ve changed blog software again</title>
   <link href="https://tonyarnold.com/2007/07/25/ive-changed-blog-software-again.html"/>
   <updated>2007-07-25T16:41:00+10:00</updated>
   <id>https://tonyarnold.com/2007/07/25/ive-changed-blog-software-again</id>
   <content type="html">&lt;p&gt;In what appears to be a biannual ‘thing’ for me over the last few years, I’ve thrown out my old blog software and replaced it with something that suits my needs and skills better. I’m now running &lt;a href=&quot;http://symphony21.com/&quot;&gt;Symphony&lt;/a&gt;, by &lt;a href=&quot;http://21degrees.com.au/&quot;&gt;21 Degrees&lt;/a&gt;, which is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Not a Rails app (it’s PHP)&lt;/strong&gt;. Whilst not entirely happy with this (as I am a huge advocate of the “Rails Way™”), both Typo and Mephisto were generally a little unreliable for me over my time using them. There’s also the fact that neither are receiving serious attention anymore - and let’s be honest, everyone loves new features once in a while;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://symphony21.com/&quot;&gt;Symphony&lt;/a&gt; is run entirely off a combination of XML and XSLTs&lt;/strong&gt;. If you’ve not worked with this combination for web sites before, you’re missing out. XSLT is the language god would present his structured data with;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s faster&lt;/strong&gt;. No idea why, but my Rails sites on Dreamhost always ran slowly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s more configurable&lt;/strong&gt; - check out the “Projects” section of my site - that’s all generated using a custom page type I set-up once and forget about.&lt;/li&gt;
  &lt;li&gt;I like shiny things. &lt;strong&gt;Obey my blog&lt;/strong&gt; - and its shiny updated design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The search pages currently suck&lt;/strong&gt;. I’m working on them.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;My RSS feed has moved&lt;/strong&gt;, and I haven’t rewritten the old URL yet (I’ll get to it).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;code-splurge&quot;&gt;Code splurge&lt;/h4&gt;

&lt;p&gt;Here’s some naff XSL I wrote (with some assistance from &lt;a href=&quot;http://overture21.com/forum/comments.php?DiscussionID=1352&quot;&gt;members and their examples at Overture&lt;/a&gt;) to scan through my XML structure and append the location of the installed &lt;a href=&quot;http://symphony21.com/&quot;&gt;Symphony&lt;/a&gt; application to the front of all absolute URLs. This means I can move my blog where-ever I like, and all of my links within pages will continue working. It’s also a good example of advanced XSL usage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xslt&quot; data-lang=&quot;xslt&quot;&gt;&amp;lt;xsl:template match=&quot;p | ul | ol | li | h1 | h2 | h3 | h4 | h5 | h6 | blockquote | em | strong | code | pre | acronym | span&quot;&amp;gt;
    &amp;lt;xsl:element name=&quot;{name(.)}&quot;&amp;gt;
        &amp;lt;xsl:apply-templates select=&quot;@*&quot;/&amp;gt;
        &amp;lt;xsl:apply-templates/&amp;gt;
    &amp;lt;/xsl:element&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match=&quot;a | img&quot;&amp;gt;
  &amp;lt;xsl:element name=&quot;{name(.)}&quot;&amp;gt;
    &amp;lt;xsl:apply-templates select=&quot;@*&quot;/&amp;gt;
    &amp;lt;xsl:if test=&quot;substring(@src,1,1)='/'&quot;&amp;gt;
      &amp;lt;xsl:attribute name=&quot;src&quot;&amp;gt;&amp;lt;xsl:value-of select=&quot;$root&quot;/&amp;gt;&amp;lt;xsl:value-of select=&quot;@src&quot;/&amp;gt;&amp;lt;/xsl:attribute&amp;gt;
    &amp;lt;/xsl:if&amp;gt;
    &amp;lt;xsl:if test=&quot;substring(@href,1,1)='/'&quot;&amp;gt;
      &amp;lt;xsl:attribute name=&quot;href&quot;&amp;gt;&amp;lt;xsl:value-of select=&quot;$root&quot;/&amp;gt;&amp;lt;xsl:value-of select=&quot;@href&quot;/&amp;gt;&amp;lt;/xsl:attribute&amp;gt;
    &amp;lt;/xsl:if&amp;gt;
    &amp;lt;xsl:apply-templates/&amp;gt;
  &amp;lt;/xsl:element&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match=&quot;@*&quot;&amp;gt;
    &amp;lt;xsl:attribute name=&quot;{name(.)}&quot;&amp;gt;&amp;lt;xsl:value-of select=&quot;.&quot;/&amp;gt;&amp;lt;/xsl:attribute&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;xsl:template match=&quot;text()&quot;&amp;gt;
    &amp;lt;xsl:value-of select=&quot;.&quot;/&amp;gt;
&amp;lt;/xsl:template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Tips for mac-hosted virtual machines</title>
   <link href="https://tonyarnold.com/2007/05/06/tips-for-mac-hosted-virtual-machines.html"/>
   <updated>2007-05-06T18:30:00+10:00</updated>
   <id>https://tonyarnold.com/2007/05/06/tips-for-mac-hosted-virtual-machines</id>
   <content type="html">&lt;p&gt;So you’ve just finished downloading, installing and setting up a shiny new virtual machine using either &lt;a href=&quot;http://www.parallels.com/en/products/desktop/&quot;&gt;Parallels Desktop for Mac&lt;/a&gt;, or &lt;a href=&quot;http://vmware.com/mac/&quot;&gt;VMware Fusion&lt;/a&gt;. What’s that you say? Your machine is now really slow? It freezes for seconds at a time?&lt;/p&gt;

&lt;p&gt;Well, that’s to be expected - you are effectively running two operating systems on your mac now. Keep that statement in mind, because my tips can’t do anything about that. &lt;strong&gt;Your machine will be slower whilst running a virtual machine&lt;/strong&gt;. Don’t despair - we should be able to make things a little more responsive.&lt;/p&gt;

&lt;p&gt;I look after a Mac Pro, an iMac and a MacBook Pro that have all been running Windows-based virtual machines for the past year without major issue - along the way, I’ve found a few tips that have made the virtual machines and my macs run a lot faster than they otherwise would have.&lt;/p&gt;

&lt;p&gt;I’ll cover off three things below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General tips for making your virtual machines faster;&lt;/li&gt;
  &lt;li&gt;Tips for &lt;a href=&quot;http://www.parallels.com/en/products/desktop/&quot;&gt;Parallels Desktop for Mac&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Tips for &lt;a href=&quot;http://vmware.com/mac/&quot;&gt;VMware Fusion&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;general-tips-for-making-your-virtual-machines-faster&quot;&gt;General tips for making your virtual machines faster&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Buy as much RAM as you can afford&lt;/strong&gt;. Seriously - more RAM means that your virtual machines won’t have to page out to disk as much, your mac will remain more responsive and your life will generally be much happier (OK, perhaps that last bit is going too far) - obviously CPU speed is important too, but you won’t see anywhere near the same improvement as just adding more RAM;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The main speed decrease you’ll see when running a virtual machine comes from disk throughput&lt;/strong&gt;. Your hard disk will churn and thrash much more than it does when you’re just running Mac OS X on its own - but you can do a couple of things to help that:
    &lt;ul&gt;
      &lt;li&gt;Dynamically expanding disks are good in most circumstances - especially for users without huge amount of disk space, but they shouldn’t be used in any situation where disk speed is essential. Each time the dynamically expanding disk reaches it’s bounds (the size of the space it has allocated itself), it needs to allocate more space which will cause the virtual machine to pause slightly;&lt;/li&gt;
      &lt;li&gt;If you intend to host a server, or run applications that will cause either operating system to use more virtual memory, my experience has been that creating a separate, statically allocated virtual disk (a disk that doesn’t dynamically expand) and moving your guest operating system’s swap or pagefile to that. I generally make mine 5Gb in size, and tell my windows guests to create a pagefile between 1024 - 4096 Mb - this means your disk will thrash a little when you first start your virtual machine, but once it’s running you’ll find things to be smoother;&lt;/li&gt;
      &lt;li&gt;Always, always, always run your virtual machines off a separate disk if you have a slower drive in your mac. My MacBook Pro is much more responsive on the mac side when it doesn’t need to compete with an entire other operating system sucking up it’s hard disk cycles. I run my virtual machines off of firewire disks, as firewire is generally much faster that USB 2.0 for purposes such as this;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Visit the forums for your product&lt;/strong&gt;. For Parallels Desktop for Mac, the address is &lt;a href=&quot;&quot;&gt;http://forum.parallels.com/&lt;/a&gt;. For VMware Fusion, the address is &lt;a href=&quot;&quot;&gt;http://communities.vmware.com/community/vmtn/desktop/fusion&lt;/a&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tips-for-parallels-desktop-for-mac&quot;&gt;Tips for Parallels Desktop for Mac&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;In general, Parallels Desktop’s default setting are pretty good already - you shouldn’t need to change them too much;&lt;/li&gt;
  &lt;li&gt;Ensure that your Virtual Machine’s cache policy is set to “&lt;strong&gt;Mac OS X&lt;/strong&gt;” on slower disks (you can find this in your virtual machine’s settings under “&lt;em&gt;Options &amp;gt; Advanced &amp;gt; Cache policy&lt;/em&gt;”. Setting it to “&lt;strong&gt;Virtual machine&lt;/strong&gt;” over “&lt;strong&gt;Mac OS X&lt;/strong&gt;” will mean that your guest operating systems get priority access to your hard disks. Given that the guests will only ever be as fast as your mac can go, I personally find no use for the “&lt;strong&gt;Virtual machine&lt;/strong&gt;” option;&lt;/li&gt;
  &lt;li&gt;If you don’t need sound, remove the sound device (or at least set the sound input device to null) - there seems to be slow down when this is enabled (I’m not sure whether it is a bug - I’ll update this post when I know);&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tips-for-vmware-fusion&quot;&gt;Tips for VMware Fusion&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Always use the latest version of Fusion available&lt;/strong&gt;. Fusion’s performance has gotten much, much better since the beta, and the 1.1 release screams;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Always use SCSI disks with Fusion&lt;/strong&gt; - IDE disks are (at this stage) much, much slower than their SCSI counterparts. Windows XP doesn’t support SCSI disks out of the box, so please be sure to use Fusion’s easy installer - this will set-up your Windows-based virtual machines to use SCSI disks without any mucking around;&lt;/li&gt;
  &lt;li&gt;Unless you have a multi-CPU Mac Pro monster, allowing your virtual machines to virtualise more than one CPU will just slow things down. &lt;strong&gt;That means you Core Duo and Core 2 Duo users - it sounds cool to have 2 CPUs under your guest, but you’ll get better performance without them&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Generally speaking, modifying your graphics settings in Fusion don’t impact performance - if you need Direct X 8 compatibility, turn it on. If you don’t - well, it doesn’t really seem to do anything to performance, so you might as well leave it off until you need it;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Coding nude to save the world (via neilang.com)</title>
   <link href="https://tonyarnold.com/2007/03/18/coding-nude-to-save-the-world.html"/>
   <updated>2007-03-18T18:00:00+11:00</updated>
   <id>https://tonyarnold.com/2007/03/18/coding-nude-to-save-the-world</id>
   <content type="html">&lt;p&gt;Everyone should &lt;a href=&quot;http://www.neilang.com/2007/03/8-tips-to-combat-global-warming-for-nerds/&quot;&gt;heed Neil’s advice&lt;/a&gt;. I may even choose to make the background of this site darker, but that’s fairly extreme. Then again, so is global warming.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;accent&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;”Schwarzenegger1.2”&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Do it. Do it noooow.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/accent&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oh, and not to sully the public service announcement above, but &lt;a href=&quot;http://www.neilang.com/2007/01/nerd-pickup-lines/&quot;&gt;Neil’s nerd pickup lines are great&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Interview’d and digg'd</title>
   <link href="https://tonyarnold.com/2007/03/18/interviewd-and-diggd.html"/>
   <updated>2007-03-18T01:30:00+11:00</updated>
   <id>https://tonyarnold.com/2007/03/18/interviewd-and-diggd</id>
   <content type="html">&lt;h2 id=&quot;or-dugg-for-the-grammatically-anal-but-not-particularly-fussy-amongst-you&quot;&gt;Or ‘dugg’ for the grammatically anal but not particularly fussy amongst you&lt;/h2&gt;

&lt;p&gt;I was asked about a week ago by &lt;a href=&quot;http://wphj.wordpress.com/&quot;&gt;wphj&lt;/a&gt; to do an e-mail interview regarding VirtueDesktops. It was a really great experience, and I’m urging you to go have a read of the result: &lt;a href=&quot;http://macapper.com/2007/03/17/interview-tony-arnold-of-virtuedesktops/&quot;&gt;http://macapper.com/2007/03/17/interview-tony-arnold-of-virtuedesktops/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really enjoyed the experience, and I hope that you guys enjoy the read. Feel free to &lt;a href=&quot;http://digg.com/apple/Interview_with_Tony_Arnold_of_VirtueDesktops&quot;&gt;digg it&lt;/a&gt; as well.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Moving on to other things</title>
   <link href="https://tonyarnold.com/2007/03/11/moving-on-to-other-things.html"/>
   <updated>2007-03-11T10:30:00+11:00</updated>
   <id>https://tonyarnold.com/2007/03/11/moving-on-to-other-things</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;I’ve also posted this over at the &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;official VirtueDesktops project site&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve been sitting on a fairly big decision (for me) for the last few weeks. The writing has been on the wall for VirtueDesktops since last year’s WWDC, but I had intended to release a nice, stable version for 10.4 users before I stopped work on the project.&lt;/p&gt;

&lt;p&gt;I’ve decided not to finish that version - &lt;a href=&quot;http://forums.cocoaforge.com/viewtopic.php?t=12392&quot;&gt;http://forums.cocoaforge.com/viewtopic.php?t=12392&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Needless to say, it wasn’t easy to make this call - I’ve loved working on Virtue, and I think it has some features that Spaces won’t match. The sad fact is, that since June last year, it has all been effort poured into a product that has no future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Wow! I hadn’t realised just how much this little app meant to people! Thankyou all for your kind e-mails, IMs and posts of thanks - I appreciate it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Logging to your own file using NSLog</title>
   <link href="https://tonyarnold.com/2007/02/17/logging-to-your-own-file-using-nslog.html"/>
   <updated>2007-02-17T11:30:00+11:00</updated>
   <id>https://tonyarnold.com/2007/02/17/logging-to-your-own-file-using-nslog</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;h2 id=&quot;outdated-info&quot;&gt;Outdated Info&lt;/h2&gt;
  &lt;p&gt;Hi there! So it’s the future now (2023 to be precise) and the recommendations in this post aren’t valid anymore.
I’d recommend you have a look at &lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack&quot;&gt;CocoaLumberjack&lt;/a&gt; instead of using the code here in anything you’re working on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever found yourself needing to have your application record quite a bit of data? Think pushing it to the user’s console is messy? (it is!) Here’s your answer. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.m&lt;/code&gt; of your cocoa application, simply add the following imports:&lt;/p&gt;

&lt;h4 id=&quot;source&quot;&gt;Source&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;stdio.h.
#import &amp;lt;sys/param.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then make your “main” method look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;int main(int argc, char *argv[])
{
  id pool = [NSAutoreleasePool new];

  NSString *applicationName = [NSString stringWithFormat: @&quot;Library/Logs/%@.log&quot;, [[NSBundle mainBundle] objectForInfoDictionaryKey: @&quot;CFBundleName&quot;]];
  NSString *logPath = [NSHomeDirectory() stringByAppendingPathComponent: applicationName];
  freopen([logPath fileSystemRepresentation], &quot;a&quot;, stderr);

  [pool release];

  return NSApplicationMain(argc,  (const char **) argv);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, all of your logging messages will be pushed to a log file with the same name as your application under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Logs/&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zen Logging for Cocoa</title>
   <link href="https://tonyarnold.com/2007/01/24/zen-logging-for-cocoa.html"/>
   <updated>2007-01-24T23:00:00+11:00</updated>
   <id>https://tonyarnold.com/2007/01/24/zen-logging-for-cocoa</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;h2 id=&quot;outdated-info&quot;&gt;Outdated Info&lt;/h2&gt;
  &lt;p&gt;Hi there! So it’s the future now (2023 to be precise) and the recommendations in this post aren’t valid anymore. I’d recommend you have a look at &lt;a href=&quot;https://github.com/CocoaLumberjack/CocoaLumberjack&quot;&gt;CocoaLumberjack&lt;/a&gt; instead of using the code here in anything you’re working on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How many times have you found yourself coding some &lt;em&gt;“sick cocoa code… gosh”&lt;/em&gt; (excuse the Napoleon Dynamite reference there), and thought - &lt;em&gt;“Gee whiz Myself, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog&lt;/code&gt; sure is sorta limp in the actual informative-ness stakes, ain’t it?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Me? All the time. So I did a bit of &lt;a href=&quot;http://outerlevel.com/blog/2006/12/01/code-review/&quot;&gt;hunting about&lt;/a&gt; and devised the following logging class based upon comments by Scott Morrison:&lt;/p&gt;

&lt;h4 id=&quot;source&quot;&gt;Source&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;#import &amp;lt;Cocoa/Cocoa.h&amp;gt;

@interface ZNLog : NSObject {}

+(void)file:(char*)sourceFile function:(char*)functionName lineNumber:(int)lineNumber format:(NSString*)format, ...;

#define ZNLog(s,...) [ZNLog file:__FILE__ function: (char *)__FUNCTION__ lineNumber:__LINE__ format:(s),##__VA_ARGS__]

@end

@implementation ZNLog

+ (void)file:(char*)sourceFile function:(char*)functionName lineNumber:(int)lineNumber format:(NSString*)format, ...
{
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
  va_list ap;
  NSString *print, *file, *function;
  va_start(ap,format);
  file = [[NSString alloc] initWithBytes: sourceFile length: strlen(sourceFile) encoding: NSUTF8StringEncoding];

  function = [NSString stringWithCString: functionName];
  print = [[NSString alloc] initWithFormat: format arguments: ap];
  va_end(ap);
  NSLog(@&quot;%@:%d %@; %@&quot;, [file lastPathComponent], lineNumber, function, print);
  [print release];
  [file release];
  [pool release];
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;license&quot;&gt;License&lt;/h4&gt;

&lt;p&gt;It’s all licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/2.5/&quot;&gt;Creative Commons Attribution 2.5&lt;/a&gt; license, so just be sure to include a short attribution back to me in your header/notes/readme.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Remember, remember the 23rd of Mo’vember…</title>
   <link href="https://tonyarnold.com/2006/11/24/movember.html"/>
   <updated>2006-11-24T00:30:00+11:00</updated>
   <id>https://tonyarnold.com/2006/11/24/movember</id>
   <content type="html">&lt;p&gt;As the day I felt more like a porn star than any that came before. Or perhaps a Metallica reject?&lt;/p&gt;

&lt;p&gt;Moustaches are dirty, dirty, dirty:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/porn_mo_shot_3-1306152168.jpg&quot; alt=&quot;Porn mo' ahoy!&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I wasn’t already attached (Hi Honey!), I’d probably be out there like, hanging out with your daughter(s) and shit. Or spending quality time at every redneck’s favourite fast food chain. Now to go find my ‘beater.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSSEdit 2 Released!</title>
   <link href="https://tonyarnold.com/2006/11/06/cssedit-2-released.html"/>
   <updated>2006-11-06T23:30:00+11:00</updated>
   <id>https://tonyarnold.com/2006/11/06/cssedit-2-released</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/cssedit_icon-1306152105.png&quot; alt=&quot;CSSEdit 2 Icon&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After an incredibly long time, and not nearly enough fanfare, &lt;a href=&quot;http://macrabbit.com/cssedit/&quot;&gt;CSSEdit 2 is out&lt;/a&gt;. If you author CSS at all, you owe it to yourself to download and pay for this wonderful application - version 2 brings fantastic live overriding of any site, allowing you to modify the styles of your dynamic blog or web site, as well as a host of other features that will make your CSS editing fun. Oh, and if you likey - don’t forget to &lt;a href=&quot;http://www.digg.com/programming/CSSEdit_2_0_Released&quot;&gt;Digg it!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jan, bloody marvellous work you Belgish wunderkind - Congratulations!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Documentation for those of us that love code</title>
   <link href="https://tonyarnold.com/2006/10/26/documentation-for-those-of-us-that-love-code.html"/>
   <updated>2006-10-26T23:00:00+10:00</updated>
   <id>https://tonyarnold.com/2006/10/26/documentation-for-those-of-us-that-love-code</id>
   <content type="html">&lt;p&gt;So as I’ve mentioned before, my day job involves a rather large web content management system by &lt;a href=&quot;http://www.interwoven.com/&quot;&gt;these guys&lt;/a&gt;, and it runs on a fairly common (for enterprise-level stuff) hybrid of native code, J2EE, XML and Perl. Add to that the resources that make the website itself shiny like stylesheets and javascripts, and there’s no possible way you could come up with a consistent method of documenting all that code, right? Right?&lt;/p&gt;

&lt;p&gt;Wrong. One of my colleagues (Hi Alex!) passed this link around earlier in the week:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.naturaldocs.org/&quot;&gt;Natural Docs&lt;/a&gt; is (as they put it) &lt;em&gt;“an open-source, extensible, multi-language documentation generator. You document your code in a natural syntax that reads like plain English. Natural Docs then scans your code and builds high-quality HTML documentation from it.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Boom. Right there. If it supported Objective C, I would be utterly, totally sold on using this in everything I do.&lt;/p&gt;

&lt;p&gt;See, the fact is, I suck at documentation. Sure, I can spell. I have pretty decent grammar (most of the time). Generally I don’t misplace my punctuation (Hello everyone younger than me, I’m looking at you!). And when push comes to shove, my documentation doesn’t suck when I actually write it - but actually sitting down and spending time writing it in the first place? Puhleeease (Yes, I can see all you corporate IT managers shaking your heads up the back there. Deal with it, programmers like to program, not cover your arses). By the way, I’m talking about serious post-code documentation here - anyone who’s ever worked on anything larger than “Hello, world!” will tell you how important specifications are to the success of any software project - I don’t believe Natural Docs have quite perfected the whole “suck the idea out of you and your client’s heads and document it for you” module just yet.&lt;/p&gt;

&lt;p&gt;I may just have to look into what’s involved in adding Objective C support to Natural Docs, because this could be the beginning of a beautiful friendship!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>About the “new” digs</title>
   <link href="https://tonyarnold.com/2006/10/24/about-the-new-digs.html"/>
   <updated>2006-10-24T21:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/10/24/about-the-new-digs</id>
   <content type="html">&lt;p&gt;You might have noticed that my blog looks a little different. Well, I had a little… problem with my old blog - apparently it was using around 40% of the CPU on the 8 CPU shared host it lives on - obviously the hosting company wasn’t real happy about that, so I had to fix the situation quickly.&lt;/p&gt;

&lt;p&gt;I’ve been eyeing off &lt;a href=&quot;http://mephistoblog.com/&quot;&gt;Mephisto&lt;/a&gt; for a while now - it seems nice and simple and the project has a good idea of what they are trying to achieve. So what the hell - I’m running this blog off &lt;a href=&quot;http://mephistoblog.com/&quot;&gt;Mephisto&lt;/a&gt; now. There are a few things missing (flickr in the sidebar, XMLRPC), but overall things should look pretty much the same. If you come across something that is broken, please let me know via the contact links to your right there.&lt;/p&gt;

&lt;p&gt;More news from the real world soon…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Color Label Button Interface Builder Palette</title>
   <link href="https://tonyarnold.com/2006/10/06/color-label-button-interface-builder-palette.html"/>
   <updated>2006-10-06T06:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/10/06/color-label-button-interface-builder-palette</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;h2 id=&quot;outdated-info&quot;&gt;Outdated Info&lt;/h2&gt;
  &lt;p&gt;Hi there! So it’s the future now (2023 to be precise) and things have moved on: Interface Builder Plugins aren’t possible anymore, so this post is just a wonderful curiosity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt; has a small problem in that when it was written, Cocoa Bindings were new and not as well understood as they are now. Lately, I’ve been spending a my time brushing up my understanding of basic cocoa concepts that I may have missed first go around. Below is the result of that brushing, and something that I think is drastically under utilised - custom Interface Builder (IB) palettes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/color_label-1306152068.png&quot; alt=&quot;ColorLabelButtonImage&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt; has the concept of “labelling” your desktops, much like you label files in the Finder. Given how used to the existing UI users are, representing it in the same fashion in the &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt; UI seems entirely logical to me. Surprise, surprise, this is one of those wonderful custom UI elements that Apple is so damned famous for not opening to developers (and in this case, I can understand given how little it is used elsewhere). So what do you do in a situation like this?&lt;/p&gt;

&lt;p&gt;Thomas (the original author of &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt;), made a custom subclass of the NSControl and NSActionCell cocoa classes, and hooked this into a view programmatically. It worked well (and is still present in the current release of &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops&lt;/a&gt;), and for all intents and purposes is a completely valid approach to the problem. Unfortunately, it has the side effect of swizzling view code (in the MVC sense) into places I don’t think view code belongs. And I can’t use IB to nicely manage every aspect of my UI (which is idealistic, but possible).&lt;/p&gt;

&lt;p&gt;Here’s my approach: For custom controls like this, I’m writing them into a simple, reusable framework and IB palette. This way, I can make my actual code a lot, lot simpler which has the flow on effect of making it easier to find and resolve existing bugs.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;http://static.tonyarnold.com/ColorLabelButton.zip&quot;&gt;download an early version of this framework&lt;/a&gt; and palette from this site, but I’ll give you a little warning - once you start using objects from a custom IB palette in your code, you need to keep that palette for future reference - if it gets deleted, and you’re still using an object dragged from the custom palette, your nib files will no longer open. I’m also not entirely happy with my cocoa prefix - I think I may move my namespace under my personal company name (boomBalada), but we’ll deal with that when we come to it.&lt;/p&gt;

&lt;p&gt;I’ll try to write up a tutorial of how to construct your own custom IB palettes shortly (same bat-time, same bat-channel…).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>That sinking feeling...</title>
   <link href="https://tonyarnold.com/2006/09/03/that-sinking-feeling.html"/>
   <updated>2006-09-03T10:00:00+10:00</updated>
   <id>https://tonyarnold.com/2006/09/03/that-sinking-feeling</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm1.static.flickr.com/78/213002814_10a01cb20c.jpg?v=0&quot; alt=&quot;Missing houseboat in Sausalito&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… and …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm1.static.flickr.com/86/213002897_06b4364179.jpg?v=0&quot; alt=&quot;Ramp leading to underwater houseboat in Sausalito&quot; class=&quot;widescreen&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>VirtueDesktops and Apple Spaces</title>
   <link href="https://tonyarnold.com/2006/08/08/virtuedesktops-and-apple-spaces.html"/>
   <updated>2006-08-08T12:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/08/08/virtuedesktops-and-apple-spaces</id>
   <content type="html">&lt;p&gt;OK, I guess I should blog about this, because I’ve got people hammering me about &lt;a href=&quot;http://www.apple.com/macosx/leopard/spaces.html&quot;&gt;Apple’s Spaces&lt;/a&gt; from all sides (I love the attention - keep it coming!).&lt;/p&gt;

&lt;p&gt;I think it’s a great thing. VirtueDesktops, and all of the other virtual desktop/screen managers on the Mac have been little more than complicated hacks, forcing your machine to emulate what most UNIX machines do out of the box - which isn’t a bad thing per se, but I have yet to see an implementation that felt integrated.&lt;/p&gt;

&lt;p&gt;“What about the future of VirtueDesktops?”, you ask? Well… I don’t know yet. I imagine that I could add features to Apple’s implementation, hanging off whatever they are doing, but to be honest it seems like a brilliant implementation to me. And I guess there’s 10.4 support for another year or so, but to be honest, the stuff they showed us about Xcode 3 today blew me away. No-one in their right mind will keep developing in Xcode 2 once version 3 is out (yes, it is that good!).&lt;/p&gt;

&lt;p&gt;Oh, I also went along to the SciFiHiFi Weblogger’s party for a couple of hours tonight (I imagine it’s still kicking, because Lord Will of the Shipley had just grooved through the door 5 minutes before I chose to leave). My impressions - the Tamale Lady rocks, and Jason Harris has to be the smiliest dude this side of Ronald MacDonald himself. Here’s hoping I am a little less soft for the next party (I think there’s a WebKit party on tomorrow night). WWDC rocks hard guys – if you can afford it and are interested in development, definitely come along next year - this looks like it’s shaping up to be plenty of fun, and we haven’t even got to the technical sessions yet! If you’re a student studying at an Australian university, find out if your uni is part of the &lt;a href=&quot;http://auc.edu.au&quot;&gt;Apple University Consortium&lt;/a&gt; - they’ve sponsored my trip this year and I am absolutely grateful!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Flights of “oh my poor, poor legs”</title>
   <link href="https://tonyarnold.com/2006/08/07/flights-of-oh-my-poor-poor-legs.html"/>
   <updated>2006-08-07T19:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/08/07/flights-of-oh-my-poor-poor-legs</id>
   <content type="html">&lt;p&gt;So I’m safely in my hotel room in San Francisco now - beaten, bruised and so, so tired. United Airlines, your cattle-class seats are a divine form of torture, and I salute the sick genius who designed them!&lt;/p&gt;

&lt;p&gt;SF seems nice - when I was a kid, I always imagined that when I went to another country, the sky would be a different colour, or the air would taste different - Vietnam held up it’s end of the bargain on the air when I was there this year - but SF seems like Sydney with wider streets and everybody going in the wrong direction. I’m told the water is not so good for me - so I’ll have to hunt down some bottled stuff later on. Oh, but it’s 25ºC here, and for some reason the hotel thinks that it’s appropriate to have the fire going - WTF indeed.&lt;/p&gt;

&lt;p&gt;I’m too ruined to be excited about WWDC yet, but that should hit tomorrow night at some point (or maybe my excitement gland is broken?) - either way, it appears not everyone is as keen as I am to break their machines with Leopard when (if?) we get the installer discs.&lt;/p&gt;

&lt;p&gt;I’d show you pictures of the room and how fantastic I look when I’m tired, but I forgot the cable for the camera. Anyhow, I’m going to go rest before dinner - lots of sightseeing to do tomorrow! If you’re here and want to have a drink, &lt;a href=&quot;mailto:Tony%20Arnold%20%3Ctony%40tonyarnold.com%3E&quot;&gt;send me an email&lt;/a&gt;, or &lt;a href=&quot;ichat://arnantrsyd&quot;&gt;iChat me&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Quicksilver’s new Cube UI (hidden preferences ahoy!)</title>
   <link href="https://tonyarnold.com/2006/07/07/quicksilvers-new-cube-ui.html"/>
   <updated>2006-07-07T08:00:00+10:00</updated>
   <id>https://tonyarnold.com/2006/07/07/quicksilvers-new-cube-ui</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/quicksilver_pimped-4e87f92c45a8f.jpg&quot; alt=&quot;Quicksilver. Pimped.&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So before I give you the magical magic fairy dust to make your Quicksilver cube interface as pretty as mine, admit the pimping-ness of this new interface. It’s hot. You want it. Nick has done a bloody marvellous job with this (this is coming from the sole user of the “mini” interface - yes, I’ve been told I was possibly the only person using it).&lt;/p&gt;

&lt;p&gt;You’ll need the &lt;a href=&quot;qsinstall:id=com.blacktree.Quicksilver.QSCubeInterfacePlugIn&quot; title=&quot;Install the Cube interface...&quot;&gt;Cube interface installed first&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now: &lt;a href=&quot;qs://preferences#QSCubeInterfacePrefPane&quot; title=&quot;QSCubeInterfacePrefPane&quot;&gt;Pimp your Quicksilver&lt;/a&gt;. Trackback your pimped rides, bitches (my pimpspeak is &lt;strong&gt;not&lt;/strong&gt; strong).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Interesting links for June 21st, 2006</title>
   <link href="https://tonyarnold.com/2006/06/21/interesting-links.html"/>
   <updated>2006-06-21T15:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/06/21/interesting-links</id>
   <content type="html">&lt;p&gt;Just keeping track of some of the interesting things I’ve found (or other people have sent to me) over the last fortnight:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://0xced.blogspot.com/2006/06/relaunch-your-cocoa-application-by.html&quot;&gt;0xced: Relaunch your Cocoa application by itself&lt;/a&gt; – a more Cocoa–like method of re-launching your application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.medallia.com/2006/05/windowwarp.html&quot;&gt;WindowWarp&lt;/a&gt; – window warping using the Core Graphics Server in Mac OS X (as the young people say - “that shit is whack, foo” … or something like that… *mumble*)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.firstmonday.org/issues/issue9_4/levesque/&quot;&gt;Fundamental issues with open source software development&lt;/a&gt; – interesting article that raises some fairly obvious things that all open source projects could do better at (including my own work).&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Captain’s log, stardate 59866.7</title>
   <link href="https://tonyarnold.com/2006/05/26/captains-log.html"/>
   <updated>2006-05-26T21:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/05/26/captains-log</id>
   <content type="html">&lt;p&gt;Hey guys, long time no blog. Just a quick note to say that if you’ve sent me an e-mail regarding VirtueDesktops and haven’t received a response, it’s not because I don’t value your feedback, time and input - it’s just that I simply don’t have time to answer every single e-mail in a reasonable time-frame. I’ve managed to work my personal e-mail inbox back down to a scary 91 real, I-need-to-reply-to-this messages. I’m getting there, but I would like to say that if your issue is important, do a quick search over at &lt;a href=&quot;http://trac.virtuedesktops.info/&quot;&gt;VirtueTrac&lt;/a&gt;, and if you can’t find your issue, &lt;a href=&quot;http://trac.virtuedesktops.info/newticket&quot;&gt;file a new ticket&lt;/a&gt;. Trac is the best thing to happen to managing subversion projects ever - it has no equal (in my humble opinion!).&lt;/p&gt;

&lt;p&gt;In other news, yes, I will be adding “SmackBook” functionality to VirtueDesktops over the weekend, because it’s cool - but I’ll be very clear that I make no guarantee that continuously slapping your laptop won’t eventually break something! Keep that in mind kids - that’s at least $1K of laptop you’re carelessly bashing there.&lt;/p&gt;

&lt;p&gt;I’ve also put in for a competitive scholarship to &lt;a href=&quot;http://developer.apple.com/wwdc/&quot;&gt;WWDC&lt;/a&gt; this year, so keep your fingers crossed and drop me a line if you’re going.&lt;/p&gt;

&lt;p&gt;Oh, and as much as I love Ruby, Rails and Typo, Typo can indeed be a colossal pain in the arse to keep running (your mileage may vary if you’re not an subversion trunk-ho like me). I’ve sorted out most of the problems (aside from the fact that my blog design isn’t what I want) for now.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Taking a small break</title>
   <link href="https://tonyarnold.com/2006/04/10/taking-a-small-break.html"/>
   <updated>2006-04-10T16:30:00+10:00</updated>
   <id>https://tonyarnold.com/2006/04/10/taking-a-small-break</id>
   <content type="html">&lt;p&gt;Hey all, thought I’d fill you in so you didn’t think Virtue wasn’t going to be updated again. I’ve been taking a short break for a week to clear my head and deal with some real world work (and spend some time with my beautiful girl). I’ll be back on deck and working on Virtue in about 2 more days - oh, and I have my MacBook Pro, so things should be plenty speedy now *grin*&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtue’s sourceforge presence</title>
   <link href="https://tonyarnold.com/2006/03/15/virtues-sourceforge-presence.html"/>
   <updated>2006-03-15T08:00:00+11:00</updated>
   <id>https://tonyarnold.com/2006/03/15/virtues-sourceforge-presence</id>
   <content type="html">&lt;p&gt;OK, the “Abandoned Project Takeover” (APT) has been approved at sf.net, and I’m now co-admin of the Virtue Desktops project there with Thomas (playback). I’ve sent an e-mail to Thomas wanting his final blessing to go ahead with the update and takeover, but Mr. Staller has been incommunicado for a while now so I think we’ll just power ahead.&lt;/p&gt;

&lt;p&gt;Here’s where I start to need help. Virtue deserves a community - you guys are that community. I don’t have the time to maintain the community and to continue developing Virtue - my full-time job takes up too much of my energy. Wanna help? I want your help.&lt;/p&gt;

&lt;p&gt;Here’s what I need: people who are willing to help me update the &lt;a href=&quot;http://virtuedesktops.sourceforge.net/&quot;&gt;http://virtuedesktops.sourceforge.net/&lt;/a&gt; site, help me move the appcast there and begin sifting through the bug reports and feature requests. It’s not glamorous work, but it needs doing.&lt;/p&gt;

&lt;p&gt;And before you ask, yes, I do want development help, but I would like to start up the mailing lists again to discuss architecture again first - all of the good OSS projects I know of have strong (dictatorial) leadership - I’m going to follow suit for the moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; After all that effort, Sourceforge’s services were sub-par in certain areas. The &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops project has moved to new hosting at cocoaforge&lt;/a&gt;, which is graciously &lt;a href=&quot;http://imajes.info/&quot;&gt;provided by imajes&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Damn windows (NSWindows that is)</title>
   <link href="https://tonyarnold.com/2006/02/26/damn-nswindows.html"/>
   <updated>2006-02-26T19:30:00+11:00</updated>
   <id>https://tonyarnold.com/2006/02/26/damn-nswindows</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.red-sweater.com/blog/97/windows-of-perception&quot;&gt;Windows of Perception.&lt;/a&gt; Amen to that, brother.&lt;/p&gt;

&lt;p&gt;Don’t get me started on the weird things Apple are doing to the desktop windows (or as Daniel would call it, the “Damn windows”). Try coding a virtual desktop manager when Apple sets windows at certain NSWindowLevels to be sticky (i.e. seen across all ‘desktops’) as opposed to just setting the bit on the individual window that needed the sticky bit flipped in the first place… finesse always seems to be just one step away where the window manager is concerned (although I’m grateful that Apple do seem to update the undocumented CGS calls that I use with each major system update). I hold very high hopes for 10.5 and future versions of the window manager - maybe I won’t need to continue developing Virtue anymore? (hint hint, Apple).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ZShell</title>
   <link href="https://tonyarnold.com/2006/02/25/zsh.html"/>
   <updated>2006-02-25T18:00:00+11:00</updated>
   <id>https://tonyarnold.com/2006/02/25/zsh</id>
   <content type="html">&lt;p&gt;I’m thinking it might be time to &lt;a href=&quot;http://zsh.sunsite.dk/Guide/zshguide.html&quot;&gt;jump ship, and look at alternate shells&lt;/a&gt;. I’m hearing a fair bit of noise about zsh from people who know what they’re doing… Any advice from people out there on this?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Xgl and the future of Virtue</title>
   <link href="https://tonyarnold.com/2006/02/08/xgl-and-the-future-of-virtue.html"/>
   <updated>2006-02-08T19:00:00+11:00</updated>
   <id>https://tonyarnold.com/2006/02/08/xgl-and-the-future-of-virtue</id>
   <content type="html">&lt;p&gt;Wow. Holy goddamn crap.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.novell.com/linux/xglrelease/&quot;&gt;http://www.novell.com/linux/xglrelease/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watch the movies. Especially the cube. I’m sorry guys, but it will be a while before I can make a desktop manager that will do that on the mac. As I mentioned in my earlier posts about Virtue, I’m just starting out with mac programming - if people want to see a desktop manager similar to the one Nat and co demoed, I’m going to need guru help. Virtue has basically hit a wall in terms of visuals — we’re limited to what Apple decides to include in the CoreGraphics/Dock code, and even then, they could pull all the transitions at any point. We need a way forward.&lt;/p&gt;

&lt;p&gt;Here’s a list of things I’m looking into, but would appreciate advice on from anyone in the know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The internals of how Mac OS is presently managing the existence of two user accounts logged in at the same time in relation to NSWorkspace/desktops. You may have noticed that Virtue presently changes desktops and &lt;strong&gt;then&lt;/strong&gt; the desktop picture changes, whereas in fast user switching the desktop picture is &lt;em&gt;part of the transition&lt;/em&gt;. I’m sure I’m missing something small in the entirely undocumented, entirely unsupported calls I’m making (:P), but if anybody else has ever looked at this code, and has any ideas, I’m all ears!&lt;/li&gt;
  &lt;li&gt;OpenGL vs. CoreImage. As much as I’d love to use CoreImage as the basis for whatever effect/transition engine this new desktop manager uses, from what I’ve seen CI transitions are slow. Especially for large images. Am I right in assuming that OpenGL is likely to be more efficient? What is being used in Keynote? I would love to have the extensibility of CoreImage though…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t count this as being an announcement of an actual product yet - I &lt;strong&gt;want&lt;/strong&gt; to make this happen, but I’m not even sure it’s possible. Chances are that I’ll spend the next 7 months writing something, and 10.5 will include everything we’re looking for (fingers crossed!).&lt;/p&gt;

&lt;p&gt;Am I nuts? Wait… don’t answer that…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Happy holidays, Campers!</title>
   <link href="https://tonyarnold.com/2005/12/24/happy-holidays.html"/>
   <updated>2005-12-24T06:30:00+11:00</updated>
   <id>https://tonyarnold.com/2005/12/24/happy-holidays</id>
   <content type="html">&lt;p&gt;Here’s wishing you all safe and happy holidays, and a bloody marvellous new year!&lt;/p&gt;

&lt;p&gt;I’ll be out of contact for the christmas period, then Leah and I leave for Vietnam at the start of January (As the late Big Kev would say – “I’m excited!”), so if you have important, world-saving information to give to me, do it &lt;strong&gt;now&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Unless I get unexpectedly inspired whilst I’m away, there won’t be any further updates to my software this year, and possibly until February, 2006. Thanks to all the simians using my software for being supportive, and a special thanks to my friends who are helping to mirror the rails installer – it’s appreciated!&lt;/p&gt;

&lt;h4 id=&quot;till-next-time---adios-crazy-little-helper-monkeys&quot;&gt;Till next time - adios, crazy little helper monkeys!&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby on Rails 1.0 Installer for Mac OS X ‘Tiger’</title>
   <link href="https://tonyarnold.com/2005/12/14/ruby-on-rails-1-installer-for-mac-os-x-tiger.html"/>
   <updated>2005-12-14T19:00:00+11:00</updated>
   <id>https://tonyarnold.com/2005/12/14/ruby-on-rails-1-installer-for-mac-os-x-tiger</id>
   <content type="html">&lt;blockquote&gt;
  &lt;h2 id=&quot;notice&quot;&gt;Notice&lt;/h2&gt;

  &lt;p&gt;&lt;em&gt;Given the age of this package, I’ve decided to take it down. I cannot support a package for an operating system and processor architecture that I no longer run. Under Mac OS X 10.5 and later, Ruby on Rails is included in the default install.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/ror_logo-1306152037.jpg&quot; alt=&quot;Ruby on Rails logo&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.rubyonrails.com/&quot;&gt;Ruby on Rails&lt;/a&gt; has reached version 1.0 – Congratulations to all of the team!&lt;/p&gt;

&lt;p&gt;Without further ado, here is an updated version of the Ruby on Rails installer package I maintain. I will be receiving assistance with hosting this package, so please do use the mirrors as they become available and try to take it easy on my server in the meantime. I would encourage people to send this file to their friends via iChat, FTP, e-mail - basically whatever works for you - let’s get this out there and get people riding the rails!&lt;/p&gt;

&lt;p&gt;This package requires Mac OS X “Tiger” (10.4), and is only compiled for PowerPC at this point. An Intel version will be available early next year.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Managing software development</title>
   <link href="https://tonyarnold.com/2005/11/26/managing-software-development.html"/>
   <updated>2005-11-26T07:00:00+11:00</updated>
   <id>https://tonyarnold.com/2005/11/26/managing-software-development</id>
   <content type="html">&lt;p&gt;I’m only new at a lot of this, so go easy on me :)&lt;/p&gt;

&lt;p&gt;I’m looking for ways to best manage the development and release cycle of Virtue and any other apps I have on the boil. At present, I use what I know - coding and compilation is done in Xcode, I manage all my code using Subversion, and I track issues (personally, it isn’t publicly available) using Trac. This works pretty well for me, but there are still things that bug me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Xcode’s speed:&lt;/strong&gt; granted Virtue does what certain &lt;a href=&quot;http://wilshipley.com/blog/2005/11/frameworks-are-teh-suck-err.html&quot;&gt;other people have been saying is a bad idea&lt;/a&gt; - it is composed of three frameworks, a carbon bundle, a static library and the application itself. I plan on taking a good hard look at this come the 0.6 development cycle.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Xcode’s subversion support:&lt;/strong&gt; it seems flaky… that could just be me though…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Release versioning:&lt;/strong&gt; At present, each build I release in the 0.5 cycle is automatically stamped with the current revision from my subversion repository. I’m not sure this is a great idea given the number of components, but it’s working so far (except when I want to do an official release, then I need to change the versions manually in the plist). Should I consider dropping versions for development builds entirely?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Release distribution and notification:&lt;/strong&gt; Well, if you’ve been following my releases here, you’ve been getting the whole show. Personally, I don’t want to be making releases on my blog – especially development releases. I’d love to set-up an appcast, but I haven’t found the time - can anyone recommend a product?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If anyone has suggestions or ideas (or even just the words ‘Hi!’), please post away - I’d love feedback!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Chat Server for Mac OS X Client</title>
   <link href="https://tonyarnold.com/2005/11/09/chat-server-for-mac-os-x-client.html"/>
   <updated>2005-11-09T15:00:00+11:00</updated>
   <id>https://tonyarnold.com/2005/11/09/chat-server-for-mac-os-x-client</id>
   <content type="html">&lt;blockquote&gt;
  &lt;h2 id=&quot;notice&quot;&gt;Notice&lt;/h2&gt;

  &lt;p&gt;&lt;em&gt;Given the age of this package, I’ve decided to take it down. I cannot support a package for an operating system and processor architecture that I no longer run.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, I’ve been putting this off for a while. Same as pretty much everything else I release at the moment, I make no guarantees - this package works for me, and I’ll be pleased if it works for you too. Oh, and as with everything else I’ve made so far, &lt;strong&gt;it’s Tiger only, and is only compiled for PowerPC-based macs&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;This installer package installs the version of jabber than Apple bundles with Mac OS X Server as ‘iChat Server’. I’ve renamed it to plain ole’ ‘Chat Server’ so people don’t confuse my dodgy work with the Apple version. I’ve also added jabber transports for MSN and Yahoo! (although you’ll need to use a dedicated client like &lt;a href=&quot;http://psi.affinix.com/&quot;&gt;Affinix’s Psi&lt;/a&gt; jabber client to activate that functionality).&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-it&quot;&gt;How do I use it?&lt;/h2&gt;

&lt;p&gt;Run the installer, reboot, then open iChat and follow the instructions below:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open iChat, then go to “&lt;em&gt;iChat » Preferences…&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;Go to the “&lt;em&gt;Accounts&lt;/em&gt;” tab, then select the “&lt;em&gt;+&lt;/em&gt;” symbol at the bottom of the window to add a new account&lt;/li&gt;
  &lt;li&gt;Under “&lt;em&gt;Account Type&lt;/em&gt;”, select “&lt;strong&gt;Jabber Account&lt;/strong&gt;”&lt;/li&gt;
  &lt;li&gt;For Jabber ID, enter the username of the account you are currently logged in as, plus ‘&lt;strong&gt;@localhost&lt;/strong&gt;’ – for example, my account login is ‘&lt;strong&gt;tony&lt;/strong&gt;’, so my Jabber ID would be ‘&lt;strong&gt;tony@localhost&lt;/strong&gt;’&lt;/li&gt;
  &lt;li&gt;Set “&lt;em&gt;Server&lt;/em&gt;” to ‘&lt;strong&gt;localhost&lt;/strong&gt;’, and “&lt;em&gt;Password&lt;/em&gt;” to the password of the account you are currently logged in as.&lt;/li&gt;
  &lt;li&gt;Don’t forget to enter a description!&lt;/li&gt;
  &lt;li&gt;Select “&lt;em&gt;Add&lt;/em&gt;” – if all went according to plan, you should now be able to connect to your locally installed Chat Server!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-do-i-chat-to-my-msnyahoo-buddies&quot;&gt;How do I chat to my MSN/Yahoo! buddies?&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&quot;http://psi.affinix.com/&quot;&gt;Affinix’s Psi&lt;/a&gt;, set-up and connect to your local chat server (the trick is to follow iChat’s settings, but also select “Use SSL encryption (to server)” and “Allow Plaintext Login” under the “Connection” tab. Then follow these instructions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you are successfully connected to your local Chat Server&lt;/li&gt;
  &lt;li&gt;Go to “&lt;em&gt;General » Service Discovery&lt;/em&gt;” and select the account you’ve just set-up&lt;/li&gt;
  &lt;li&gt;You should see both “&lt;em&gt;MSN Transport&lt;/em&gt;” and “&lt;em&gt;Yahoo! Transport&lt;/em&gt;” – right-click on whichever one you want to use (yes, you can use both at the same time) and select “&lt;em&gt;Register&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;Fill in your username and password for whichever network you just chose and hit “&lt;em&gt;Register&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;If all went according to plan, you should be asked to authorise the network transport you just added - do that, then close Psi and re-open iChat&lt;/li&gt;
  &lt;li&gt;Voila! You can now chat to your MSN/Yahoo! buddies directly from iChat (although you can’t send files or images to them as you do your iChat buddies)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;enough-already--wheres-the-download&quot;&gt;Enough already – where’s the download?&lt;/h2&gt;

&lt;strike&gt;OK, OK, you can download it here: Install Chat Server.zip (8.9Mb). As always, let me know if you run into trouble via the comments.&lt;/strike&gt;

</content>
 </entry>
 
 <entry>
   <title>Fixing Rails' permissions on the Mac</title>
   <link href="https://tonyarnold.com/2005/10/25/fixing-rails-permissions-on-the-mac.html"/>
   <updated>2005-10-25T15:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/10/25/fixing-rails-permissions-on-the-mac</id>
   <content type="html">&lt;p&gt;About three times a week, people message or email me with questions about their Rails app having permission problems. I’m posting this so people can figure this out themselves (not that I don’t appreciate the kind words that come with the questions).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir /Library/WebServer/Rails
$ chgrp www /Library/WebServer/Rails
$ cd /Library/WebServer/Rails
$ rails ./MyWondrousRailsApp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So long as you create your Rails apps there, you shouldn’t have any problems. Basically, it looks like Rails needs read access to all of your application path – hence putting it in your home directory will result in your application throwing an error. Natch&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtue virtual desktop manager for Tiger</title>
   <link href="https://tonyarnold.com/2005/10/23/virtue-for-tiger.html"/>
   <updated>2005-10-23T20:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/10/23/virtue-for-tiger</id>
   <content type="html">&lt;p&gt;Back under Panther, we mac users had two very good options for virtual desktops on our small screens: &lt;a href=&quot;http://wsmanager.sf.net/&quot;&gt;Desktop Manager&lt;/a&gt; - the grand-daddy of all mac desktop switchers, and &lt;a href=&quot;http://virtuedesktops.sf.net/&quot;&gt;Virtue Desktops&lt;/a&gt; - a flashy, feature-packed fork of Desktop Manager. Personally, I didn’t get much of a chance to play with Virtue due to my involvement in the testing of Tiger, but people constantly touted it’s features and told me I should try it – that’s a little hard when the application didn’t even start under Tiger.&lt;/p&gt;

&lt;p&gt;Well, now it does. I’m happy with the featureset that Desktop Manager provides, and I like it’s simplicity, but there a couple of things I have found in Virtue that I think (when they work) could be very, very useful. I &lt;strong&gt;could&lt;/strong&gt; wait for &lt;a href=&quot;http://www.livejournal.com/users/filecoreinuse/&quot;&gt;Rich&lt;/a&gt; to update Desktop Manager, but he appears to have disappeared into a complex maze of study, linux and the so-called “real world™”. So I decided to do it myself.&lt;/p&gt;

&lt;p&gt;Straight up, you &lt;strong&gt;cannot&lt;/strong&gt; go to Thomas Staller (Virtue’s original author), nor Rich Wareham, the author of Desktop Manager - this mess is my own, and I’m quite sure neither of those chaps wants to know about problems you’re having with my bastardised version of their code. Second: it runs. That’s pretty much all I’ll guarantee - all of Virtue 0.5r2’s features are there, and some of them work just as they did before, but others are horridly broken (the desktop label option for example). Third: I’m not making any guarantees that this is something I intend to update often or at all - I started this because another software author egged me on (you know who you are, Mr. Jitkoff), and because I wanted to get back into programming for the mac.&lt;/p&gt;

&lt;h4 id=&quot;requirements&quot;&gt;Requirements&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OS X 10.4 “Tiger”&lt;/li&gt;
  &lt;li&gt;A want to make your screen get all flippy (check out the “Flip Desktop” transition - that’s new for Tiger)&lt;/li&gt;
  &lt;li&gt;Quartz Extreme? (not sure on that - could someone let me know?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, if you have trouble - you’re contacting &lt;strong&gt;me&lt;/strong&gt; with those troubles – now download away: ~Virtue 0.5r3 (~ 1.2 Mb)~ &lt;em&gt;— I’ve removed this download.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The &lt;a href=&quot;http://virtuedesktops.info/&quot;&gt;VirtueDesktops project has moved to new hosting at cocoaforge&lt;/a&gt;, which is graciously &lt;a href=&quot;http://imajes.info/&quot;&gt;provided by imajes&lt;/a&gt;. You can download the latest version of VirtueDesktops there.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Serenity: Hell, yes!</title>
   <link href="https://tonyarnold.com/2005/10/09/serenity-hell-yes.html"/>
   <updated>2005-10-09T20:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/10/09/serenity-hell-yes</id>
   <content type="html">&lt;p&gt;Leah and I went to see &lt;a href=&quot;http://www.serenitymovie.com/&quot;&gt;Serenity&lt;/a&gt; last Friday night, and &lt;strong&gt;wow&lt;/strong&gt;, I was impressed. I’d been preparing Leah for the movie earlier in the week by making her watch the first few episodes - understand up front that my girlfriend is one of those people who &lt;strong&gt;doesn’t watch TV&lt;/strong&gt;. Yes, you heard me right. In the entire time we’ve been together there have been about 3 TV shows that she has made an effort to watch. So when she commented how much she enjoyed watching the few episodes of Firefly, I was somewhat surprised.&lt;/p&gt;

&lt;p&gt;I think the thing we both agreed upon was the fact that the setting (spaceships, futuristic scenery, et al) played second fiddle to the story, characters, atmosphere and back story the entire way throughout the film. From the cussin’ in Chinese to the western music and feel, right back to Mal asking Buddha for a pony, this a slick, well thought out production with characters that you actually like and want to follow. But most importantly, there were incredibly creepy, sick bad guys and kickass space battles. Oh the space battles… The story for Serenity is also much darker than that of any of the episodes in the Firefly series, so be ready for some pretty intense scenes.&lt;/p&gt;

&lt;p&gt;Short review: this is quite possibly the best science fiction movie I’ve ever seen - I will definitely be going back to see it again. It gets about 17 extra stars for the simple fact that it had some fairly full-on, scary scenes, spaceships and western music and Leah still enjoyed it. If you haven’t seen the Firefly pilot episode – go see that first, but otherwise you really won’t regret seeing this movie!&lt;/p&gt;

&lt;p&gt;You can watch the first 10 minutes of the movie here ? &lt;a href=&quot;http://video.vividas.com/CDN1/3929_Serenity/web/index.html&quot;&gt;http://video.vividas.com/CDN1/3929_Serenity/web/index.html&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby on Rails for PowerPC macs</title>
   <link href="https://tonyarnold.com/2005/10/09/ruby-on-rails-for-powerpc-macs.html"/>
   <updated>2005-10-09T20:00:00+10:00</updated>
   <id>https://tonyarnold.com/2005/10/09/ruby-on-rails-for-powerpc-macs</id>
   <content type="html">&lt;blockquote&gt;
  &lt;h2 id=&quot;notice&quot;&gt;Notice&lt;/h2&gt;

  &lt;p&gt;&lt;em&gt;Given the age of this package, I’ve decided to take it down. I cannot support a package for an operating system and processor architecture that I no longer run. Under Mac OS X 10.5 and later, Ruby on Rails is included in the default install.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well fellow fat controllers, after much feedback and a fair amount of procrastination, here is an updated copy of my ruby on rails installer package. It now contains the latest versions of rails, rake and a number of other useful gems. As always, a ‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo gem update&lt;/code&gt;’ wouldn’t hurt after installing this package.&lt;/p&gt;

&lt;p&gt;On another note, I’ve been told that my previous package was missing the SWIG bindings, so users without the Xcode tools couldn’t use a minimal rails install and sqlite3 to get started (I can understand wanting to do this - the Xcode tools are getting quite hefty!). Well, this release includes the SWIG bindings (hence it being double the size). I’ve not tested this without the Xcode tools, so if some adventurous soul could let me know how this goes, I’d be mighty appreciative.&lt;/p&gt;

&lt;p&gt;As always, this package &lt;strong&gt;does not contain the MySQL ruby bindings&lt;/strong&gt;. You can &lt;a href=&quot;/entries/mysql-bindings-for-ruby-under-mac-os-x-tiger&quot;&gt;follow my earlier instructions to install the MySQL bindings&lt;/a&gt; if you feel you need them installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It appears that this installer &lt;strong&gt;will&lt;/strong&gt; let you use Ruby on Rails without the Xcode tools installed. Be aware that you won’t be able to install any rubygems that contain a native extension (like the MySQL bindings) due to the need for a compiler. You will also not be able to upgrade some of your rubygems for the same reason. It will get you off the ground though, and if Ruby on Rails gets your attention, installing the Xcode tools won’t seem like such a big deal! It is also compiled for PowerPC only.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>My brother's music</title>
   <link href="https://tonyarnold.com/2005/09/09/my-brothers-music.html"/>
   <updated>2005-09-09T17:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/09/09/my-brothers-music</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/paddy_w_guitar-1306151808.jpg&quot; alt=&quot;Paddy playing his guitar&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I should have done this the moment I set up this blog, but I didn’t know my brother, Patrick, had any of his music online. If you like wild acoustic guitar work, random harmonicas and an indie sound, you owe it to yourself to check him (and his band) out.&lt;/p&gt;

&lt;p&gt;There’s not a lot up there as yet, but you can find his personal music at &lt;a href=&quot;http://www.mp3.com.au/patrickarnold/&quot;&gt;http://www.mp3.com.au/patrickarnold/&lt;/a&gt; and music from his band - Inanimate Objects - at &lt;a href=&quot;http://www.mp3.com.au/inanimateobjects/&quot;&gt;http://www.mp3.com.au/inanimateobjects/&lt;/a&gt;. MP3.com.au’s download system is awful, so I’m including two Inanimate Objects songs below - my personal favourite is ‘No Time For Haste’ - Pat wrote that song years ago.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://static.tonyarnold.com/02-significance-1306151959.mp3&quot;&gt;Significance - Inanimate Objects&lt;/a&gt; (~ 5.7Mb)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://static.tonyarnold.com/03-no-time-for-haste-1306151972.mp3&quot;&gt;No Time For Haste - Inanimate Objects&lt;/a&gt; (~ 5.8Mb)&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Google Talk</title>
   <link href="https://tonyarnold.com/2005/08/24/google-talk.html"/>
   <updated>2005-08-24T19:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/08/24/google-talk</id>
   <content type="html">&lt;p&gt;Well, there’s a lot of fluff going around about &lt;a href=&quot;http://talk.google.com&quot;&gt;Google Talk&lt;/a&gt; - it looks to be just another &lt;a href=&quot;http://www.jabber.org/&quot;&gt;Jabber&lt;/a&gt; server. You can use it by following the instructions at: &lt;a href=&quot;http://www.smashsworld.com/2005/08/im-on-google-talk-right-now.php&quot;&gt;http://www.smashsworld.com/2005/08/im-on-google-talk-right-now.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, unless there’s something I’m missing, I’m not excited - I have my local copy of jabberd configured on my powerbook with both the MSN and Yahoo! transports, which means I can talk to my MSN buddies (with avatars) via iChat. Now that’s something to get excited about…&lt;/p&gt;

&lt;p&gt;Maybe I should post some binaries or a how-to on installing jabber locally and using iChat for MSN and Yahoo! chats?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Agile Web Development with Rails is here!</title>
   <link href="https://tonyarnold.com/2005/08/17/agile-web-development-with-rails-is-here.html"/>
   <updated>2005-08-17T17:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/08/17/agile-web-development-with-rails-is-here</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://static.tonyarnold.com/agilewebdev-1306151698.jpg&quot; alt=&quot;Image of my Agile Web Development with Rails book&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My copy of ‘Agile Web Development with Rails’ turned up yesterday. I’m very excited about getting my teeth into this for a personal project that a friend and I are about to start work on!&lt;/p&gt;

&lt;p&gt;If you are interested in Rails, and don’t know where to begin, this book looks like the perfect place to start - &lt;a href=&quot;http://www.pragmaticprogrammer.com/titles/rails/index.html&quot;&gt;Go get the book now&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL Bindings for Ruby under Mac OS X Tiger</title>
   <link href="https://tonyarnold.com/2005/08/12/mysql-bindings-for-ruby-under-tiger.html"/>
   <updated>2005-08-12T16:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/08/12/mysql-bindings-for-ruby-under-tiger</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;h2 id=&quot;outdated-information&quot;&gt;Outdated Information&lt;/h2&gt;

  &lt;p&gt;The last time this post was updated, it was 18 years old. I wouldn’t recommend using the instructions below on anything but a Mac running Mac OS X 10.4 “Tiger”.&lt;/p&gt;

  &lt;p&gt;Also, these instructions are not for Mac OS X Server - it comes with it’s own version of MySQL installed, and thus the procedure below probably won’t work without some modifications (then again, if you’re running Server, you’re probably skilled enough to figure out what to change yourself). Apologies for anyone on Server who has tried to follow these instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, after yesterdays mammoth post this one should be a bit quicker. Basically, there are a few issues with the building of native gems under Mac OS X at the moment, and until they’re dealt with up-stream, getting certain rubygems to install is going to be trial and error.&lt;/p&gt;

&lt;h4 id=&quot;1-download-and-install-mysql&quot;&gt;1. Download and install MySQL&lt;/h4&gt;

&lt;p&gt;I’ll leave you to figure this out - I use the latest 5.x release myself, but version 4.x will work just as well. You can get the disk images from &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL.com&lt;/a&gt;. There is also a launch daemon written by Jacob Stetser, which you can &lt;a href=&quot;http://blog.unquiet.net/archives/2005/05/19/launchd-item-for-mysql/&quot;&gt;grab from his blog&lt;/a&gt; (I would recommend using this over the MySQL.com bundled startup item).&lt;/p&gt;

&lt;h4 id=&quot;2-un-install-any-mysql-rubygems-you-may-already-have-installed&quot;&gt;2. Un-install any MySQL rubygems you may already have installed&lt;/h4&gt;

&lt;p&gt;We need to remove any earlier – possibly failed – attempts at installing the binding:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gem uninstall mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all goes well, you’ll now be ruby-mysql-less.&lt;/p&gt;

&lt;h4 id=&quot;3-download-and-install-the-latest-mysql-bindings&quot;&gt;3. Download and install the latest MySQL bindings&lt;/h4&gt;

&lt;p&gt;For some reason, people have been seeing dynamic linker issues with the latest released version of the mysql bindings, but Courtenay over at &lt;a href=&quot;&quot;&gt;http://habtm.com/&lt;/a&gt; found that using the version 2.7 bindings resolves this issue&lt;/p&gt;

&lt;p&gt;So go ahead and download &lt;a href=&quot;http://tmtm.org/downloads/mysql/ruby/mysql-ruby-2.7.tar.gz&quot;&gt;http://tmtm.org/downloads/mysql/ruby/mysql-ruby-2.7.tar.gz&lt;/a&gt;, I’ll wait. When you’re done, extract the archive and switch back to the terminal and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; to where you’ve extracted the source. The parts you need to type are in bold below.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gcc_select 4.0
$ export PATH=/usr/local/mysql/bin:$PATH
$ ruby extconf.rb --with-mysql-config
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Guess what? If everything proceeded as above, you’re done! Next time, I’ll post some information about actually using the mysql bindings (even given my preference for sqlite). For now, &lt;a href=&quot;http://wiki.rubyonrails.com/&quot;&gt;the Ruby on Rails wiki&lt;/a&gt; has some great tutorials and starting points, as well as information about contacting other rails developers. Getting in contact with other Rails developers is something I really recommend you do, as the Rails community has some great minds you can learn from, and some friendly people who can help you when you get stuck. Good luck!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Rolling with Ruby on Rails on Mac OS X Tiger</title>
   <link href="https://tonyarnold.com/2005/08/11/rolling-with-ruby-on-rails-for-tiger.html"/>
   <updated>2005-08-11T09:30:00+10:00</updated>
   <id>https://tonyarnold.com/2005/08/11/rolling-with-ruby-on-rails-for-tiger</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;h2 id=&quot;outdated-information&quot;&gt;Outdated Information&lt;/h2&gt;

  &lt;p&gt;The last time this post was updated, it was 18 years old. I wouldn’t recommend using the instructions below on anything but a Mac running Mac OS X 10.4 “Tiger”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve found myself helping a few people get up and running with &lt;a href=&quot;http://www.rubyonrails.com/&quot;&gt;Ruby on Rails&lt;/a&gt; over the last month, mainly due to my &lt;a href=&quot;/2005/12/14/ruby-on-rails-1-installer-for-mac-os-x-tiger.html&quot;&gt;Ruby on Rails installer package&lt;/a&gt;. I thought it might be a good idea to document installing and setting up rails from end to end on Mac OS X, given the difficulties some people are encountering along the way.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You should install the Xcode Tools package (it’s on your Tiger installer disc) before starting the instructions below - I’ve had reports of Rails working without the Xcode tools, but it’s just simpler to have them there anyway.&lt;/li&gt;
  &lt;li&gt;You must not be using a custom-installed version of Ruby or Apache (i.e. via Fink or DarwinPorts), as the installer package augments the included versions that come with Mac OS X Tiger, and will not work with custom-installed binaries.&lt;/li&gt;
  &lt;li&gt;You should be familiar with some basic terminal commands. These instructions will help, but Rails itself has components that can only be run from the command line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-and-install-the-package&quot;&gt;Download and install the package&lt;/h3&gt;

&lt;p&gt;First up, grab the package I mentioned above: &lt;a href=&quot;/2005/12/14/ruby-on-rails-1-installer-for-mac-os-x-tiger.html&quot;&gt;Ruby on Rails installer&lt;/a&gt; (about 6.6 Mb), and install it. This package includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A fix for Ruby 1.8.2 that comes with Mac OS X 10.4 - by default, it tries to cross-compile an native rubygems extensions for i686 as well as ppc. This won’t work on a standard Tiger install, so we remove those references.&lt;/li&gt;
  &lt;li&gt;FastCGI developer’s kit&lt;/li&gt;
  &lt;li&gt;RubyGems 0.8.10 with the following gems pre-installed:
    &lt;ul&gt;
      &lt;li&gt;BlueCloth 1.0&lt;/li&gt;
      &lt;li&gt;FastCGI Bindings for Ruby 0.8.6.1&lt;/li&gt;
      &lt;li&gt;Madeleine 0.7.1&lt;/li&gt;
      &lt;li&gt;Rake 0.6.2
        &lt;ul&gt;
          &lt;li&gt;RedCloth 3.0.4&lt;/li&gt;
          &lt;li&gt;Ruby on Rails 0.13.1&lt;/li&gt;
          &lt;li&gt;SQLite 3 Bindings for Ruby 1.1.0&lt;/li&gt;
          &lt;li&gt;Syntax 1.0.0&lt;/li&gt;
          &lt;li&gt;More…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;update-your-rubygems&quot;&gt;Update your rubygems&lt;/h3&gt;

&lt;p&gt;The installer package I created was built a few months ago, so some of the gems have newer versions available. Thankfully, gems are really, really easy to update. Open a new terminal window and paste this in:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gem update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will go through the process of bringing all of your gems, including Rails, up to the latest versions available. Accept any questions it asks about dependencies.&lt;/p&gt;

&lt;h3 id=&quot;create-a-test-rails-application&quot;&gt;Create a test rails application&lt;/h3&gt;

&lt;p&gt;To make sure everything installed properly, go back to the terminal and type the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~
$ mkdir Rails
$ cd Rails
$ rails Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see the following output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create
create  app/apis
create  app/controllers
create  app/helpers
create  app/models
create  app/views/layouts
create  config/environments
create  components
create  db
create  doc
create  lib
create  log
create  public/images
create  public/javascripts
create  public/stylesheets
create  script
create  test/fixtures
create  test/functional
create  test/mocks/development
create  test/mocks/test
create  test/unit
create  vendor
create  Rakefile
create  README
create  CHANGELOG
create  app/controllers/application.rb
create  app/helpers/application_helper.rb
create  test/test_helper.rb
create  config/database.yml
create  config/routes.rb
create  public/.htaccess
create  config/environment.rb
create  config/environments/production.rb
create  config/environments/development.rb
create  config/environments/test.rb
create  script/console
create  script/destroy
create  script/generate
create  script/server
create  script/runner
create  script/benchmarker
create  script/profiler
create  script/breakpointer
create  public/dispatch.rb
create  public/dispatch.cgi
create  public/dispatch.fcgi
create  public/404.html
create  public/500.html
create  public/index.html
create  public/favicon.ico
create  public/javascripts/prototype.js
create  public/javascripts/effects.js
create  public/javascripts/dragdrop.js
create  public/javascripts/controls.js
create  doc/README_FOR_APP
create  log/server.log
create  log/production.log
create  log/development.log
create  log/test.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If that all worked, congratulations! You now have a working rails install. At this point, you could simple type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/Rails/Test
$ ./script/server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And rails will bring up WEBrick, a simple ruby-based web server that you can use to develop with. You’ll notice that WEBrick is slow - which is why we’re going to use Apache instead.&lt;/p&gt;

&lt;h3 id=&quot;setting-the-right-permissions-on-your-application&quot;&gt;Setting the right permissions on your application&lt;/h3&gt;

&lt;p&gt;If your rails application is still running WEBrick, stop that now by pressing control-c. There are a couple of ways to do set-up rails applications under Apache, but I’m going to stick with what I consider to be the most straight-forward approach. Your applications will be served under URLs like http://localhost/testapp/.&lt;/p&gt;

&lt;p&gt;First up, we need to make sure that the permissions on your rails application are OK. This is the most common error I’ve come across when setting up a new application. It’s important to know which user the Apache is running as - by default under Mac OS X, it’s the user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; with a group of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt;. Obviously, you still need to be able to write to your application, so we’re just going to change the group on the applications files by typing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/Rails/
$ sudo chgrp -R www Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to make sure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;, and any logs stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; can be accessed and written to by Apache:&lt;/p&gt;

&lt;p&gt;$ cd ~/Rails/Test
  $ chmod 0775 db
  $ chmod 0777 log
  $ chmod 0775 public
  $ chmod 0666 log/*.log&lt;/p&gt;

&lt;p&gt;Right, your permissions should be OK at this point, so let’s move on to configuring Apache to see your rails application!&lt;/p&gt;

&lt;h3 id=&quot;set-up-apache-to-handle-your-rails-applications&quot;&gt;Set-up Apache to handle your rails applications&lt;/h3&gt;

&lt;p&gt;In your favourite text editor (I use &lt;a href=&quot;http://www.macromates.com/&quot;&gt;Macromate’s TextMate&lt;/a&gt;) open up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/httpd/httpd.conf&lt;/code&gt;. Scroll right to the bottom and make sure the following code is present:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;IfModule mod_fastcgi.c&amp;gt;
    FastCgiIpcDir /tmp/fcgi_ipc/
    AddHandler fastcgi-script .fcgi
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ll need to add the code to handle your application:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Alias /test/ &quot;/Users/YOURUSERNAME/Rails/Test/public/&quot;
Alias /test &quot;/Users/YOURUSERNAME/Rails/Test/public/&quot;

&amp;lt;Directory /Users/YOURUSERNAME/Rails/Test/public/&amp;gt;
    Options ExecCGI FollowSymLinks
    AllowOverride all
    Order allow,deny
    Allow from all
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and close the file. Now inside your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; rails application, you’ll need to open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public/.htaccess&lt;/code&gt; and change the following line:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteRule ^(.*)$ dispatch.cgi [QSA,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll also need to add the following line underneath &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RewriteEngine On&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteBase /test/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and close the file. Now, type the following in your terminal:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apachectl graceful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;check-your-application&quot;&gt;Check your application&lt;/h3&gt;

&lt;p&gt;Open your web browser and point it at &lt;a href=&quot;http://localhost/test/&quot;&gt;http://localhost/test/&lt;/a&gt;. If everything worked OK, you should be rolling on rails!&lt;/p&gt;

&lt;p&gt;I’ll try to post some more information about where to go from here, and also how to install the mysql ruby bindings which can be troublesome, and aren’t included in my package (I use sqlite as my database while developing). For now, have fun!&lt;/p&gt;

</content>
 </entry>
 

</feed>
